// Generated by PMS #152
package rds

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRdsPgSqlLimits() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsPgSqlLimitsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of RDS PostgreSQL instance.`,
			},
			"db_name": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the name of the database.`,
			},
			"sql_limit_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of SQL limit.`,
			},
			"query_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the query ID.`,
			},
			"query_string": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the text form of SQL statement.`,
			},
			"max_concurrency": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the number of SQL statements executed simultaneously.`,
			},
			"max_waiting": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the max waiting time in seconds.`,
			},
			"search_path": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the query order for names that are not schema qualified.`,
			},
			"is_effective": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the SQL limit is effective.`,
			},
			"sql_limits": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of SQL limits.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of SQL limit.`,
						},
						"query_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the query ID.`,
						},
						"query_string": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the text form of SQL statement.`,
						},
						"max_concurrency": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the number of SQL statements executed simultaneously.`,
						},
						"max_waiting": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the max waiting time in seconds.`,
						},
						"search_path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the query order for names that are not schema qualified.`,
						},
						"is_effective": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the SQL limit is effective.`,
						},
					},
				},
			},
		},
	}
}

type PgSqlLimitsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPgSqlLimitsDSWrapper(d *schema.ResourceData, meta interface{}) *PgSqlLimitsDSWrapper {
	return &PgSqlLimitsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsPgSqlLimitsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPgSqlLimitsDSWrapper(d, meta)
	listSqlLimitRst, err := wrapper.ListSqlLimit()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSqlLimitToSchema(listSqlLimitRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RDS GET /v3/{project_id}/instances/{instance_id}/sql-limit
func (w *PgSqlLimitsDSWrapper) ListSqlLimit() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v3/{project_id}/instances/{instance_id}/sql-limit"
	uri = strings.ReplaceAll(uri, "{instance_id}", d.Get("instance_id").(string))
	params := map[string]any{
		"db_name": w.Get("db_name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("sql_limit_objects", "offset", "limit", 0).
		Filter(
			filters.New().From("sql_limit_objects").
				Where("id", "=", w.Get("sql_limit_id")).
				Where("query_id", "=", w.Get("query_id")).
				Where("query_string", "=", w.Get("query_string")).
				Where("max_concurrency", "=", w.GetToInt("max_concurrency")).
				Where("max_waiting", "=", w.GetToInt("max_waiting")).
				Where("search_path", "=", w.Get("search_path")).
				Where("is_effective", "=", w.GetToBool("is_effective")),
		).
		Request().
		Result()
}

func (w *PgSqlLimitsDSWrapper) listSqlLimitToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("sql_limits", schemas.SliceToList(body.Get("sql_limit_objects"),
			func(sqlLimit gjson.Result) any {
				return map[string]any{
					"id":              sqlLimit.Get("id").Value(),
					"query_id":        sqlLimit.Get("query_id").Value(),
					"query_string":    sqlLimit.Get("query_string").Value(),
					"max_concurrency": sqlLimit.Get("max_concurrency").Value(),
					"max_waiting":     sqlLimit.Get("max_waiting").Value(),
					"search_path":     sqlLimit.Get("search_path").Value(),
					"is_effective":    sqlLimit.Get("is_effective").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
