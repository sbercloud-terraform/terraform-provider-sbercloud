// Generated by PMS #141
package rds

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRdsSqlAuditLogs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsSqlAuditLogsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the RDS instance.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the start time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the end time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
			},
			"audit_logs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of the SQL audit logs.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the audit log.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the audit log file name.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the size in KB of the audit log.`,
						},
						"begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the start time of the audit log.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the end time of the audit log.`,
						},
					},
				},
			},
		},
	}
}

type SqlAuditLogsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSqlAuditLogsDSWrapper(d *schema.ResourceData, meta interface{}) *SqlAuditLogsDSWrapper {
	return &SqlAuditLogsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsSqlAuditLogsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSqlAuditLogsDSWrapper(d, meta)
	lisAudRst, err := wrapper.ListAuditlogs()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listAuditlogsToSchema(lisAudRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API RDS GET /v3/{project_id}/instances/{instance_id}/auditlog
func (w *SqlAuditLogsDSWrapper) ListAuditlogs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v3/{project_id}/instances/{instance_id}/auditlog"
	uri = strings.ReplaceAll(uri, "{instance_id}", d.Get("instance_id").(string))
	params := map[string]any{
		"start_time": w.Get("start_time"),
		"end_time":   w.Get("end_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("auditlogs", "offset", "limit", 50).
		Request().
		Result()
}

func (w *SqlAuditLogsDSWrapper) listAuditlogsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("audit_logs", schemas.SliceToList(body.Get("auditlogs"),
			func(auditLog gjson.Result) any {
				return map[string]any{
					"id":         auditLog.Get("id").Value(),
					"name":       auditLog.Get("name").Value(),
					"size":       auditLog.Get("size").Value(),
					"begin_time": auditLog.Get("begin_time").Value(),
					"end_time":   auditLog.Get("end_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
