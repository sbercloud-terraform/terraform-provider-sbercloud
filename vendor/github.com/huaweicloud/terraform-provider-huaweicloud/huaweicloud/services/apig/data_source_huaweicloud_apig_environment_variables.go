// Generated by PMS #184
package apig

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceApigEnvironmentVariables() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceApigEnvironmentVariablesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the dedicated instance to which the environment variables belong.`,
			},
			"group_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the group to which the environment variables belong.`,
			},
			"env_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the environment to which the environment variables belong.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the environment variable.`,
			},
			"variables": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All environment variables that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the environment variable.`,
						},
						"group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The group ID corresponding to the environment variable.`,
						},
						"env_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The environment ID corresponding to the environment variable.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the environment variable.`,
						},
						"value": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The value of the environment variable.`,
						},
					},
				},
			},
		},
	}
}

type EnvironmentVariablesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newEnvironmentVariablesDSWrapper(d *schema.ResourceData, meta interface{}) *EnvironmentVariablesDSWrapper {
	return &EnvironmentVariablesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceApigEnvironmentVariablesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newEnvironmentVariablesDSWrapper(d, meta)
	lisEnvVarV2Rst, err := wrapper.ListEnvironmentVariablesV2()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listEnvironmentVariablesV2ToSchema(lisEnvVarV2Rst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API APIG GET /v2/{project_id}/apigw/instances/{instance_id}/env-variables
func (w *EnvironmentVariablesDSWrapper) ListEnvironmentVariablesV2() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "apig")
	if err != nil {
		return nil, err
	}

	uri := "/v2/{project_id}/apigw/instances/{instance_id}/env-variables"
	uri = strings.ReplaceAll(uri, "{instance_id}", w.Get("instance_id").(string))
	params := map[string]any{
		"group_id":      w.Get("group_id"),
		"env_id":        w.Get("env_id"),
		"variable_name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("variables", "offset", "limit", 100).
		OkCode(200).
		Request().
		Result()
}

func (w *EnvironmentVariablesDSWrapper) listEnvironmentVariablesV2ToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("variables", schemas.SliceToList(body.Get("variables"),
			func(variables gjson.Result) any {
				return map[string]any{
					"id":       variables.Get("id").Value(),
					"group_id": variables.Get("group_id").Value(),
					"env_id":   variables.Get("env_id").Value(),
					"name":     variables.Get("variable_name").Value(),
					"value":    variables.Get("variable_value").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
