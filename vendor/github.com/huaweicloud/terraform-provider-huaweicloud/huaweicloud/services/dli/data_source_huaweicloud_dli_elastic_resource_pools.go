// Generated by PMS #67
package dli

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDliElasticPools() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDliElasticPoolsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the elastic resource pool.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the elastic resource pool.`,
			},
			"tags": {
				Type:        schema.TypeMap,
				Optional:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `Specifies the key/value pairs to associate with the elastic resource pool.`,
			},
			"elastic_resource_pools": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All elastic resource pools that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The elastic resource pool ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The elastic resource pool name.`,
						},
						"max_cu": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The maximum CUs number of the elastic resource pool.`,
						},
						"min_cu": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The minimum CUs number of the elastic resource pool.`,
						},
						"current_cu": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The current CUs number of the elastic resource pool.`,
						},
						"actual_cu": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The actual CUs number of the elastic resource pool.`,
						},
						"cidr": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The CIDR block of network to associate with the elastic resource pool.`,
						},
						"resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource ID of the elastic resource pool.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The enterprise project ID corresponding to the elastic resource pool.`,
						},
						"queues": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The list of queues association with the elastic resource pool.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the elastic resource pool.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The current status of the elastic resource pool.`,
						},
						"owner": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The account name for creating elastic resource pool.`,
						},
						"manager": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the elastic resource pool.`,
						},
						"fail_reason": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The reason of elastic resource pool creation failed.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the elastic resource pool.`,
						},
					},
				},
			},
		},
	}
}

type ElasticPoolsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newElasticPoolsDSWrapper(d *schema.ResourceData, meta interface{}) *ElasticPoolsDSWrapper {
	return &ElasticPoolsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDliElasticPoolsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newElasticPoolsDSWrapper(d, meta)
	lisElaResPooRst, err := wrapper.ListElasticResourcePools()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listElasticResourcePoolsToSchema(lisElaResPooRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DLI GET /v3/{project_id}/elastic-resource-pools
func (w *ElasticPoolsDSWrapper) ListElasticResourcePools() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dli")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/elastic-resource-pools"
	params := map[string]any{
		"name":   w.Get("name"),
		"status": w.Get("status"),
		"tags":   w.getTag(),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("elastic_resource_pools", "offset", "limit", 100).
		Request().
		Result()
}

func (w *ElasticPoolsDSWrapper) listElasticResourcePoolsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("elastic_resource_pools", schemas.SliceToList(body.Get("elastic_resource_pools"),
			func(elaResPoo gjson.Result) any {
				return map[string]any{
					"id":                    elaResPoo.Get("id").Value(),
					"name":                  elaResPoo.Get("elastic_resource_pool_name").Value(),
					"max_cu":                elaResPoo.Get("max_cu").Value(),
					"min_cu":                elaResPoo.Get("min_cu").Value(),
					"current_cu":            elaResPoo.Get("current_cu").Value(),
					"actual_cu":             elaResPoo.Get("actual_cu").Value(),
					"cidr":                  elaResPoo.Get("cidr_in_vpc").Value(),
					"resource_id":           elaResPoo.Get("resource_id").Value(),
					"enterprise_project_id": elaResPoo.Get("enterprise_project_id").Value(),
					"queues":                schemas.SliceToStrList(elaResPoo.Get("queues")),
					"description":           elaResPoo.Get("description").Value(),
					"status":                elaResPoo.Get("status").Value(),
					"owner":                 elaResPoo.Get("owner").Value(),
					"manager":               elaResPoo.Get("manager").Value(),
					"fail_reason":           elaResPoo.Get("fail_reason").Value(),
					"created_at":            w.setElaResPooCreTim(&elaResPoo),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (w *ElasticPoolsDSWrapper) getTag() string {
	raw := w.Get("tags")
	if raw == nil {
		return ""
	}

	tags := raw.(map[string]interface{})
	tagsList := make([]string, 0, len(tags))
	for k, v := range tags {
		tagsList = append(tagsList, k+"="+v.(string))
	}
	return strings.Join(tagsList, ",")
}

func (*ElasticPoolsDSWrapper) setElaResPooCreTim(data *gjson.Result) string {
	return utils.FormatTimeStampRFC3339(data.Get("create_time").Int()/1000, false)
}
