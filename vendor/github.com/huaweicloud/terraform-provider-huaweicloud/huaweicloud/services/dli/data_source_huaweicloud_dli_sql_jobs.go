// Generated by PMS #124
package dli

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDliSqlJobs() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDliSqlJobsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"job_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the job to be queried.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the job to be queried.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the job to be queried.`,
			},
			"queue_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the queue name which this job to be submitted belongs.`,
			},
			"start_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the time when a job is start to be queried.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the time when a job is end to be queried.`,
			},
			"jobs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All jobs that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of job.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of job.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the job.`,
						},
						"queue_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The queue name which this job to be submitted belongs.`,
						},
						"owner": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The user who submits the job.`,
						},
						"database_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The database name where the table that records its operations is located.`,
						},
						"sql": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The SQL statement is executed by the job.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a job is start, in RFC 3339 format.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when a job is end, in RFC 3339 format.`,
						},
						"duration": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The job running duration (unit: millisecond).`,
						},
						"tags": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The key/value pairs to associate with the job.`,
						},
					},
				},
			},
		},
	}
}

type SqlJobsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSqlJobsDSWrapper(d *schema.ResourceData, meta interface{}) *SqlJobsDSWrapper {
	return &SqlJobsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDliSqlJobsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSqlJobsDSWrapper(d, meta)
	listSqlJobsRst, err := wrapper.ListSqlJobs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSqlJobsToSchema(listSqlJobsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DLI GET /v1.0/{project_id}/jobs
func (w *SqlJobsDSWrapper) ListSqlJobs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dli")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/jobs"
	params := map[string]any{
		"end":        w.getEnd(),
		"job-status": w.Get("status"),
		"job-type":   w.Get("type"),
		"queue_name": w.Get("queue_name"),
		"start":      w.getStart(),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		PageSizePager("jobs", "current-page", "page-size", 50).
		Filter(
			filters.New().From("jobs").
				Where("job_id", "=", w.Get("job_id")),
		).
		Request().
		Result()
}

func (w *SqlJobsDSWrapper) listSqlJobsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("jobs", schemas.SliceToList(body.Get("jobs"),
			func(job gjson.Result) any {
				return map[string]any{
					"id":            job.Get("job_id").Value(),
					"type":          job.Get("job_type").Value(),
					"status":        job.Get("status").Value(),
					"queue_name":    job.Get("queue_name").Value(),
					"owner":         job.Get("owner").Value(),
					"database_name": job.Get("database_name").Value(),
					"sql":           job.Get("statement").Value(),
					"start_time":    w.setJobsStartTime(job),
					"end_time":      w.setJobsEndTime(job),
					"duration":      job.Get("duration").Value(),
					"tags":          w.setJobsTag(job),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (w *SqlJobsDSWrapper) getEnd() int {
	endTime := w.Get("end_time")
	// If this parameter is not specified, it returns 0, 0 means querying all data.
	if endTime == nil {
		return 0
	}
	return int(utils.ConvertTimeStrToNanoTimestamp(endTime.(string)))
}

func (w *SqlJobsDSWrapper) getStart() int {
	startTime := w.Get("start_time")
	// If this parameter is not specified, it returns 0, 0 means querying all data.
	if startTime == nil {
		return 0
	}
	return int(utils.ConvertTimeStrToNanoTimestamp(startTime.(string)))
}

func (*SqlJobsDSWrapper) setJobsStartTime(data gjson.Result) string {
	rawDate := data.Get("start_time").Int()
	return utils.FormatTimeStampRFC3339(rawDate/1000, false)
}

func (*SqlJobsDSWrapper) setJobsEndTime(data gjson.Result) string {
	rawDate := data.Get("end_time").Int()
	return utils.FormatTimeStampRFC3339(rawDate/1000, false)
}

func (*SqlJobsDSWrapper) setJobsTag(data gjson.Result) map[string]string {
	tags := make(map[string]string)

	tagArr := data.Get("tags").Array()
	for _, v := range tagArr {
		tags[v.Get("key").String()] = v.Get("value").String()
	}
	return tags
}
