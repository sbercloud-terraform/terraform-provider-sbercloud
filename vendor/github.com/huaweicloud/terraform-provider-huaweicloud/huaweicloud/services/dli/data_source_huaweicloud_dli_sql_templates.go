// Generated by PMS #119
package dli

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceDliSqlTemplates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceDliSqlTemplatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the SQL template to be queried.`,
			},
			"template_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the SQL template to be queried.`,
			},
			"group": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the group name to which the SQL templates belong.`,
			},
			"owner": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies user ID of owner to be queried.`,
			},
			"templates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `All templates that match the filter parameters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of SQL template.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of SQL template.`,
						},
						"sql": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The SQL statement of SQL template.`,
						},
						"group": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The group name to which the SQL template belongs.`,
						},
						"owner": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The user ID of owner.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the SQL template.`,
						},
					},
				},
			},
		},
	}
}

type SqlTemplatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSqlTemplatesDSWrapper(d *schema.ResourceData, meta interface{}) *SqlTemplatesDSWrapper {
	return &SqlTemplatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceDliSqlTemplatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSqlTemplatesDSWrapper(d, meta)
	lisSqlJobTemRst, err := wrapper.ListSqlJobTemplates()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSqlJobTemplatesToSchema(lisSqlJobTemRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API DLI GET /v1.0/{project_id}/sqls
func (w *SqlTemplatesDSWrapper) ListSqlJobTemplates() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "dli")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/sqls"
	params := map[string]any{
		"keyword": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		Filter(
			filters.New().From("sqls").
				Where("sql_id", "=", w.Get("template_id")).
				Where("group", "=", w.Get("group")).
				Where("owner", "=", w.Get("owner")),
		).
		Request().
		Result()
}

func (w *SqlTemplatesDSWrapper) listSqlJobTemplatesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("templates", schemas.SliceToList(body.Get("sqls"),
			func(template gjson.Result) any {
				return map[string]any{
					"id":          template.Get("sql_id").Value(),
					"name":        template.Get("sql_name").Value(),
					"sql":         template.Get("sql").Value(),
					"group":       template.Get("group").Value(),
					"owner":       template.Get("owner").Value(),
					"description": template.Get("description").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
