// Generated by PMS #135
package css

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCssLogstashPipelines() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssLogstashPipelinesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies ID of the CSS logstash cluster.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the configuration file names of the CSS logstash cluster pipeline.`,
			},
			"pipelines": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The pipeline list of the CSS logstash cluster.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"update_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time of the CSS logstash cluster pipeline.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The configuration file name of the CSS logstash cluster.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the CSS logstash cluster pipeline.`,
						},
						"keep_alive": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether keep alive.`,
						},
						"events": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The event of the CSS logstash cluster pipeline.`,
						},
					},
				},
			},
		},
	}
}

type LogstashPipelinesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newLogstashPipelinesDSWrapper(d *schema.ResourceData, meta interface{}) *LogstashPipelinesDSWrapper {
	return &LogstashPipelinesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssLogstashPipelinesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newLogstashPipelinesDSWrapper(d, meta)
	lisPipRst, err := wrapper.ListPipelines()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPipelinesToSchema(lisPipRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS GET /v1.0/{project_id}/clusters/{cluster_id}/lgsconf/listpipelines
func (w *LogstashPipelinesDSWrapper) ListPipelines() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v1.0/{project_id}/clusters/{cluster_id}/lgsconf/listpipelines"
	uri = strings.ReplaceAll(uri, "{cluster_id}", d.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().From("pipelines").
				Where("name", "=", w.Get("name")).
				Where("status", "!=", "stopped"),
		).
		Request().
		Result()
}

func (w *LogstashPipelinesDSWrapper) listPipelinesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("pipelines", schemas.SliceToList(body.Get("pipelines"),
			func(pipeline gjson.Result) any {
				return map[string]any{
					"update_at":  pipeline.Get("updateAt").Value(),
					"name":       pipeline.Get("name").Value(),
					"status":     pipeline.Get("status").Value(),
					"keep_alive": pipeline.Get("keepAlive").Value(),
					"events":     schemas.MapToStrMap(pipeline.Get("events")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
