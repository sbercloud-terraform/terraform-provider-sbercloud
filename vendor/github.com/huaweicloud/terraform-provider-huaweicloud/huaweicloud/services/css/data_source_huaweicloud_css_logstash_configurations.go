// Generated by PMS #146
package css

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCssLogstashConfigurations() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssLogstashConfigurationsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies ID of the CSS logstash cluster.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the configuration file name.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the configuration file content check status.`,
			},
			"confs": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The configuration file list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The configuration file name.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The configuration file content check status.`,
						},
						"conf_content": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The configuration file content.`,
						},
						"setting": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The configuration file setting information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"workers": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The number of worker threads.`,
									},
									"batch_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The maximum number of events.`,
									},
									"batch_delay_ms": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The minimum time for an event to be scheduled to wait.`,
									},
									"queue_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Internal queue model for event buffering.`,
									},
									"queue_check_point_writes": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The maximum number of events to be written.`,
									},
									"queue_max_bytes_mb": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The total capacity of the persistent queue.`,
									},
								},
							},
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
					},
				},
			},
		},
	}
}

type LogstashConfigurationsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newLogstashConfigurationsDSWrapper(d *schema.ResourceData, meta interface{}) *LogstashConfigurationsDSWrapper {
	return &LogstashConfigurationsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssLogstashConfigurationsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newLogstashConfigurationsDSWrapper(d, meta)
	listConfsRst, err := wrapper.ListConfs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listConfsToSchema(listConfsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS GET /v1.0/{project_id}/clusters/{cluster_id}/lgsconf/listconfs
func (w *LogstashConfigurationsDSWrapper) ListConfs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v1.0/{project_id}/clusters/{cluster_id}/lgsconf/listconfs"
	uri = strings.ReplaceAll(uri, "{cluster_id}", d.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().From("confs").
				Where("name", "=", w.Get("name")).
				Where("status", "=", w.Get("status")),
		).
		Request().
		Result()
}

func (w *LogstashConfigurationsDSWrapper) listConfsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("confs", schemas.SliceToList(body.Get("confs"),
			func(conf gjson.Result) any {
				return map[string]any{
					"name":         conf.Get("name").Value(),
					"status":       conf.Get("status").Value(),
					"conf_content": conf.Get("confContent").Value(),
					"setting": schemas.SliceToList(conf.Get("setting"),
						func(setting gjson.Result) any {
							return map[string]any{
								"workers":                  setting.Get("workers").Value(),
								"batch_size":               setting.Get("batchSize").Value(),
								"batch_delay_ms":           setting.Get("batchDelayMs").Value(),
								"queue_type":               setting.Get("queueType").Value(),
								"queue_check_point_writes": setting.Get("queueCheckPointWrites").Value(),
								"queue_max_bytes_mb":       setting.Get("queueMaxBytesMb").Value(),
							}
						},
					),
					"updated_at": conf.Get("updateAt").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
