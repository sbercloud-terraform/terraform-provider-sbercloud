// Generated by PMS #162
package css

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCssLogstashCertificates() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssLogstashCertificatesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies ID of the CSS logstash cluster.`,
			},
			"certs_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the certificate type.`,
			},
			"file_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the file name of the certificate.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the certificate.`,
			},
			"certificates": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the certificates.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the certificate.`,
						},
						"file_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the certificate.`,
						},
						"file_location": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The file location of the certificate.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the certificate.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The upload time of the certificate.`,
						},
					},
				},
			},
		},
	}
}

type LogstashCertificatesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newLogstashCertificatesDSWrapper(d *schema.ResourceData, meta interface{}) *LogstashCertificatesDSWrapper {
	return &LogstashCertificatesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssLogstashCertificatesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newLogstashCertificatesDSWrapper(d, meta)
	listCertsRst, err := wrapper.ListCerts()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCertsToSchema(listCertsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS GET /v1.0/{project_id}/clusters/{cluster_id}/certs
func (w *LogstashCertificatesDSWrapper) ListCerts() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/clusters/{cluster_id}/certs"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	params := map[string]any{
		"certsType": w.Get("certs_type"),
	}
	params = utils.RemoveNil(params)
	if w.Get("certs_type") != nil {
		return httphelper.New(client).
			Method("GET").
			URI(uri).
			Query(params).
			OkCode(200).
			Request().
			Result()
	}

	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetStart(1).
		OffsetPager("certsRecords", "start", "limit", 10).
		Filter(
			filters.New().From("customCerts").
				Where("fileName", "=", w.Get("file_name")).
				Where("status", "=", w.Get("status")),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *LogstashCertificatesDSWrapper) listCertsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("certificates", schemas.SliceToList(body.Get("certsRecords"),
			func(certificate gjson.Result) any {
				return map[string]any{
					"id":            certificate.Get("id").Value(),
					"file_name":     certificate.Get("fileName").Value(),
					"file_location": certificate.Get("fileLocation").Value(),
					"status":        certificate.Get("status").Value(),
					"updated_at":    certificate.Get("updateAt").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
