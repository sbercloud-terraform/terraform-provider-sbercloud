// Generated by PMS #131
package css

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCssClusters() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssClustersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cluster ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cluster name.`,
			},
			"engine_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the engine type. The values can be **elasticsearch** and **logstash**.`,
			},
			"engine_version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the engine version.`,
			},
			"clusters": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of cluster objects.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster name.`,
						},
						"security_group_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The security group ID.`,
						},
						"bandwidth_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The public network bandwidth. The unit is Mbit/s.`,
						},
						"actions": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The current behavior of a cluster.`,
						},
						"period": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether a cluster is billed on the yearly/monthly mode.`,
						},
						"instances": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The list of node objects.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"spec_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The node specifications.`,
									},
									"az_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The AZ of a node.`,
									},
									"ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The instance IP address.`,
									},
									"volume": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The instance volume.`,
										Elem:        cluInsVolElem(),
									},
									"status": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The node status.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The type of the current node.`,
									},
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The cluster instance ID.`,
									},
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The cluster instance name.`,
									},
								},
							},
						},
						"public_ip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The public IP address information.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster status.`,
						},
						"subnet_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The subnet ID.`,
						},
						"backup_available": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the snapshot function is enabled.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the enterprise project that a cluster belongs to.`,
						},
						"public_kibana_resp": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The kibana public network access information.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"eip_size": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `The bandwidth range. The unit is Mbit/s.`,
									},
									"elb_white_list_resp": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The elb white list of the cluster public kibana.`,
										Elem:        cpkrewlrElem(),
									},
									"public_kibana_ip": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The IP address for accessing kibana.`,
									},
									"bandwidth_resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource id for ES public network access.`,
									},
								},
							},
						},
						"vpc_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of a VPC.`,
						},
						"datastore": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The cluster data store.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The engine type.`,
									},
									"version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The version of the CSS cluster engine.`,
									},
								},
							},
						},
						"endpoint": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IP address and port number of the user used to access the VPC.`,
						},
						"https_enable": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `The communication encryption status.`,
						},
						"authority_enable": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable authentication.`,
						},
						"disk_encrypted": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether disks are encrypted.`,
						},
						"elb_white_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The EIP whitelist.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"enable_white_list": {
										Type:        schema.TypeBool,
										Computed:    true,
										Description: `Whether the public network access control is enabled.`,
									},
									"white_list": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whitelist for public network access.`,
									},
								},
							},
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The last modification time of a cluster.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cluster creation time.`,
						},
						"bandwidth_resource_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource id for ES public network access.`,
						},
					},
				},
			},
		},
	}
}

// cpkrewlrElem
// The Elem of "clusters.public_kibana_resp.elb_white_list_resp"
func cpkrewlrElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"enable_white_list": {
				Type:        schema.TypeBool,
				Computed:    true,
				Description: `Whether the kibana access control is enabled.`,
			},
			"white_list": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `Whitelist of public network for accessing kibana.`,
			},
		},
	}
}

// cluInsVolElem
// The Elem of "clusters.instances.volume"
func cluInsVolElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"type": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The instance volume type.`,
			},
			"size": {
				Type:        schema.TypeInt,
				Computed:    true,
				Description: `The instance volume size.`,
			},
		},
	}
}

type ClustersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newClustersDSWrapper(d *schema.ResourceData, meta interface{}) *ClustersDSWrapper {
	return &ClustersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssClustersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newClustersDSWrapper(d, meta)
	lisCluDetRst, err := wrapper.ListClustersDetails()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listClustersDetailsToSchema(lisCluDetRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS GET /v1.0/{project_id}/clusters
func (w *ClustersDSWrapper) ListClustersDetails() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/clusters"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetStart(1).
		OffsetPager("clusters", "start", "limit", 10).
		Filter(
			filters.New().From("clusters").
				Where("name", "=", w.Get("name")).
				Where("id", "=", w.Get("cluster_id")).
				Where("datastore.type", "=", w.Get("engine_type")).
				Where("datastore.version", "=", w.Get("engine_version")),
		).
		Request().
		Result()
}

func (w *ClustersDSWrapper) listClustersDetailsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("clusters", schemas.SliceToList(body.Get("clusters"),
			func(cluster gjson.Result) any {
				return map[string]any{
					"id":                cluster.Get("id").Value(),
					"name":              cluster.Get("name").Value(),
					"security_group_id": cluster.Get("securityGroupId").Value(),
					"bandwidth_size":    cluster.Get("bandwidthSize").Value(),
					"actions":           schemas.SliceToStrList(cluster.Get("actions")),
					"period":            cluster.Get("period").Value(),
					"instances": schemas.SliceToList(cluster.Get("instances"),
						func(instance gjson.Result) any {
							return map[string]any{
								"spec_code": instance.Get("specCode").Value(),
								"az_code":   instance.Get("azCode").Value(),
								"ip":        instance.Get("ip").Value(),
								"volume":    w.setCluInsVol(instance),
								"status":    instance.Get("status").Value(),
								"type":      instance.Get("type").Value(),
								"id":        instance.Get("id").Value(),
								"name":      instance.Get("name").Value(),
							}
						},
					),
					"public_ip":             cluster.Get("publicIp").Value(),
					"status":                cluster.Get("status").Value(),
					"subnet_id":             cluster.Get("subnetId").Value(),
					"backup_available":      cluster.Get("backupAvailable").Value(),
					"enterprise_project_id": cluster.Get("enterpriseProjectId").Value(),
					"public_kibana_resp": schemas.SliceToList(cluster.Get("publicKibanaResp"),
						func(pubKibRes gjson.Result) any {
							return map[string]any{
								"eip_size":              pubKibRes.Get("eipSize").Value(),
								"elb_white_list_resp":   w.setCpkrewlr(pubKibRes),
								"public_kibana_ip":      pubKibRes.Get("publicKibanaIp").Value(),
								"bandwidth_resource_id": pubKibRes.Get("bandwidthResourceId").Value(),
							}
						},
					),
					"vpc_id": cluster.Get("vpcId").Value(),
					"datastore": schemas.SliceToList(cluster.Get("datastore"),
						func(datastore gjson.Result) any {
							return map[string]any{
								"type":    datastore.Get("type").Value(),
								"version": datastore.Get("version").Value(),
							}
						},
					),
					"endpoint":         cluster.Get("endpoint").Value(),
					"https_enable":     cluster.Get("httpsEnable").Value(),
					"authority_enable": cluster.Get("authorityEnable").Value(),
					"disk_encrypted":   cluster.Get("diskEncrypted").Value(),
					"elb_white_list": schemas.SliceToList(cluster.Get("elbWhiteList"),
						func(elbWhiteList gjson.Result) any {
							return map[string]any{
								"enable_white_list": elbWhiteList.Get("enableWhiteList").Value(),
								"white_list":        elbWhiteList.Get("whiteList").Value(),
							}
						},
					),
					"updated_at":            cluster.Get("updated").Value(),
					"created_at":            cluster.Get("created").Value(),
					"bandwidth_resource_id": cluster.Get("bandwidthResourceId").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*ClustersDSWrapper) setCluInsVol(instance gjson.Result) any {
	return schemas.SliceToList(instance.Get("volume"), func(volume gjson.Result) any {
		return map[string]any{
			"type": volume.Get("type").Value(),
			"size": volume.Get("size").Value(),
		}
	})
}

func (*ClustersDSWrapper) setCpkrewlr(pubKibRes gjson.Result) any {
	return schemas.SliceToList(pubKibRes.Get("elbWhiteListResp"), func(elbWhiLisRes gjson.Result) any {
		return map[string]any{
			"enable_white_list": elbWhiLisRes.Get("enableWhiteList").Value(),
			"white_list":        elbWhiLisRes.Get("whiteList").Value(),
		}
	})
}
