// Generated by PMS #157
package css

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCssElbLoadbalancers() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCssElbLoadbalancersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"cluster_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the CSS cluster.`,
			},
			"loadbalancer_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the loadbalancer.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the loadbalancer.`,
			},
			"protocol_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the layer 7 protocol ID of the loadbalancer.`,
			},
			"is_cross": {
				Type:        schema.TypeBool,
				Optional:    true,
				Description: `Specifies whether to enable cross-VPC backend.`,
			},
			"loadbalancers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the loadbalancer.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The loadbalancer ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The loadbalancer name.`,
						},
						"l7_flavor_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The layer 7 protocol ID of the loadbalancer.`,
						},
						"ip_target_enable": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable cross-VPC backend.`,
						},
					},
				},
			},
		},
	}
}

type ElbLoadbalancersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newElbLoadbalancersDSWrapper(d *schema.ResourceData, meta interface{}) *ElbLoadbalancersDSWrapper {
	return &ElbLoadbalancersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCssElbLoadbalancersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newElbLoadbalancersDSWrapper(d, meta)
	listElbsRst, err := wrapper.ListElbs()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listElbsToSchema(listElbsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CSS GET /v1.0/{project_id}/clusters/{cluster_id}/loadbalancers
func (w *ElbLoadbalancersDSWrapper) ListElbs() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "css")
	if err != nil {
		return nil, err
	}

	uri := "/v1.0/{project_id}/clusters/{cluster_id}/loadbalancers"
	uri = strings.ReplaceAll(uri, "{cluster_id}", w.Get("cluster_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().From("loadbalancers").
				Where("id", "=", w.Get("loadbalancer_id")).
				Where("name", "=", w.Get("name")).
				Where("l7_flavor_id", "=", w.Get("protocol_id")).
				Where("ip_target_enable", "=", w.Get("is_cross")),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *ElbLoadbalancersDSWrapper) listElbsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("loadbalancers", schemas.SliceToList(body.Get("loadbalancers"),
			func(loadbalancer gjson.Result) any {
				return map[string]any{
					"id":               loadbalancer.Get("id").Value(),
					"name":             loadbalancer.Get("name").Value(),
					"l7_flavor_id":     loadbalancer.Get("l7_flavor_id").Value(),
					"ip_target_enable": loadbalancer.Get("ip_target_enable").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
