// Generated by PMS #155
package rds

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceRdsRecyclingInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsRecyclingInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance name.`,
			},
			"ha_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the instance type.`,
			},
			"engine_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the DB engine name.`,
			},
			"engine_version": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the DB engine version.`,
			},
			"pay_model": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the billing mode.`,
			},
			"volume_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the storage type.`,
			},
			"volume_size": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the storage space in **GB**.`,
			},
			"data_vip": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the floating IP address.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"recycle_backup_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup ID.`,
			},
			"recycle_status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the backup status.`,
			},
			"is_serverless": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the instance is a serverless instance.`,
			},
			"instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of recycling RDS instances.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance name.`,
						},
						"ha_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance type.`,
						},
						"engine_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance DB engine name.`,
						},
						"engine_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance DB engine version.`,
						},
						"pay_model": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the instance billing mode.`,
						},
						"volume_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the storage type.`,
						},
						"volume_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the storage space in **GB**.`,
						},
						"data_vip": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the floating IP address.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the enterprise project ID.`,
						},
						"retained_until": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the retention time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
						},
						"recycle_backup_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup ID.`,
						},
						"recycle_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup status.`,
						},
						"is_serverless": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether the instance is a serverless instance.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the creation time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
						},
						"deleted_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the deletion time in the **yyyy-mm-ddThh:mm:ssZ** format.`,
						},
					},
				},
			},
		},
	}
}

type RecyclingInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRecyclingInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *RecyclingInstancesDSWrapper {
	return &RecyclingInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsRecyclingInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRecyclingInstancesDSWrapper(d, meta)
	lisRecInsRst, err := wrapper.ListRecycleInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listRecycleInstancesToSchema(lisRecInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API RDS GET /v3/{project_id}/recycle-instances
func (w *RecyclingInstancesDSWrapper) ListRecycleInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/recycle-instances"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		OffsetPager("instances", "offset", "limit", 50).
		Filter(
			filters.New().From("instances").
				Where("id", "=", w.Get("instance_id")).
				Where("name", "=", w.Get("name")).
				Where("ha_mode", "=", w.Get("ha_mode")).
				Where("engine_name", "=", w.Get("engine_name")).
				Where("engine_version", "=", w.Get("engine_version")).
				Where("pay_model", "=", w.Get("pay_model")).
				Where("volume_type", "=", w.Get("volume_type")).
				Where("volume_size", "=", w.GetToInt("volume_size")).
				Where("data_vip", "=", w.Get("data_vip")).
				Where("recycle_backup_id", "=", w.Get("recycle_backup_id")).
				Where("recycle_status", "=", w.Get("recycle_status")).
				Where("is_serverless", "=", w.GetToBool("is_serverless")).
				Where("enterprise_project_id", "=", w.Get("enterprise_project_id")),
		).
		Request().
		Result()
}

func (w *RecyclingInstancesDSWrapper) listRecycleInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("instances", schemas.SliceToList(body.Get("instances"),
			func(instance gjson.Result) any {
				return map[string]any{
					"id":                    instance.Get("id").Value(),
					"name":                  instance.Get("name").Value(),
					"ha_mode":               instance.Get("ha_mode").Value(),
					"engine_name":           instance.Get("engine_name").Value(),
					"engine_version":        instance.Get("engine_version").Value(),
					"pay_model":             instance.Get("pay_model").Value(),
					"volume_type":           instance.Get("volume_type").Value(),
					"volume_size":           instance.Get("volume_size").Value(),
					"data_vip":              instance.Get("data_vip").Value(),
					"enterprise_project_id": instance.Get("enterprise_project_id").Value(),
					"retained_until":        instance.Get("retained_until").Value(),
					"recycle_backup_id":     instance.Get("recycle_backup_id").Value(),
					"recycle_status":        instance.Get("recycle_status").Value(),
					"is_serverless":         instance.Get("is_serverless").Value(),
					"created_at":            instance.Get("created_at").Value(),
					"deleted_at":            instance.Get("deleted_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
