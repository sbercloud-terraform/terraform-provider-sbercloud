// Generated by PMS #111
package rds

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRdsCrossRegionBackups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRdsCrossRegionBackupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the cross-region backup.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the RDS instance.`,
			},
			"backup_type": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the type of the cross-region backup.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the cross-region backup.`,
			},
			"backup_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the cross-region backup.`,
			},
			"begin_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the start time for obtaining the cross-region backup list.`,
			},
			"end_time": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the end time for obtaining the cross-region backup list.`,
			},
			"backups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Indicates the list of the cross-region backups.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the cross-region backup.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the name of the cross-region backup.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the type of the cross-region backup.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the status of the cross-region backup.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the ID of the RDS Instance.`,
						},
						"begin_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup start time in the **yyyy-mm-ddThh:mm:ssZ** format`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Indicates the backup end time in the **yyyy-mm-ddThh:mm:ssZ"** format.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Indicates the backup size in KB.`,
						},
						"databases": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the database to be backed up.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"name": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the database to be backed up for Microsoft SQL Server.`,
									},
								},
							},
						},
						"associated_with_ddm": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Indicates whether a DDM instance has been associated.`,
						},
						"datastore": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Indicates the database information`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the database engine.`,
									},
									"version": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Indicates the database engine version.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type CrossRegionBackupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCrossRegionBackupsDSWrapper(d *schema.ResourceData, meta interface{}) *CrossRegionBackupsDSWrapper {
	return &CrossRegionBackupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRdsCrossRegionBackupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCrossRegionBackupsDSWrapper(d, meta)
	lisOffSitBacRst, err := wrapper.ListOffSiteBackups()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listOffSiteBackupsToSchema(lisOffSitBacRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)
	return nil
}

// @API RDS GET /v3/{project_id}/offsite-backups
func (w *CrossRegionBackupsDSWrapper) ListOffSiteBackups() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rds")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/offsite-backups"
	params := map[string]any{
		"instance_id": w.Get("instance_id"),
		"backup_id":   w.Get("backup_id"),
		"backup_type": w.Get("backup_type"),
		"begin_time":  w.Get("begin_time"),
		"end_time":    w.Get("end_time"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("backups", "offset", "limit", 0).
		Filter(
			filters.New().From("backups").
				Where("name", "=", w.Get("name")).
				Where("status", "=", w.Get("status")),
		).
		Request().
		Result()
}

func (w *CrossRegionBackupsDSWrapper) listOffSiteBackupsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("backups", schemas.SliceToList(body.Get("backups"),
			func(backups gjson.Result) any {
				return map[string]any{
					"id":          backups.Get("id").Value(),
					"name":        backups.Get("name").Value(),
					"type":        backups.Get("type").Value(),
					"status":      backups.Get("status").Value(),
					"instance_id": backups.Get("instance_id").Value(),
					"begin_time":  backups.Get("begin_time").Value(),
					"end_time":    backups.Get("end_time").Value(),
					"size":        backups.Get("size").Value(),
					"databases": schemas.SliceToList(backups.Get("databases"),
						func(dat gjson.Result) any {
							return map[string]any{
								"name": dat.Get("name").Value(),
							}
						},
					),
					"associated_with_ddm": backups.Get("associated_with_ddm").Value(),
					"datastore": schemas.SliceToList(backups.Get("datastore"),
						func(dat gjson.Result) any {
							return map[string]any{
								"type":    dat.Get("type").Value(),
								"version": dat.Get("version").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
