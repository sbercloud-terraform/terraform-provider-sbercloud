// Generated by PMS #161
package waf

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafRulesWebTamperProtection() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafRulesWebTamperProtectionRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the policy to which the web tamper protection rules belong.`,
			},
			"rule_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the web tamper protection rule.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the web tamper protection rule.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID to which the protection policy belongs.`,
			},
			"rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of web tamper protection rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the web tamper protection rule.`,
						},
						"policy_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the policy to which the web tamper protection rule belongs.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The status of the web tamper protection rule.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the web tamper protection rule.`,
						},
						"path": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The URL protected by the web tamper protection rule.`,
						},
						"domain": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The domain name protected by the web tamper protection rule.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the web tamper protection rule.`,
						},
					},
				},
			},
		},
	}
}

type RulesWebTamperProtectionDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRulesWebTamperProtectionDSWrapper(d *schema.ResourceData, meta interface{}) *RulesWebTamperProtectionDSWrapper {
	return &RulesWebTamperProtectionDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafRulesWebTamperProtectionRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRulesWebTamperProtectionDSWrapper(d, meta)
	lisAntRulRst, err := wrapper.ListAntitamperRule()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAntitamperRuleToSchema(lisAntRulRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/waf/policy/{policy_id}/antitamper
func (w *RulesWebTamperProtectionDSWrapper) ListAntitamperRule() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/waf/policy/{policy_id}/antitamper"
	uri = strings.ReplaceAll(uri, "{policy_id}", w.Get("policy_id").(string))
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		PageSizePager("items", "page", "pagesize", 100).
		Filter(
			filters.New().From("items").
				Where("id", "=", w.Get("rule_id")).
				Where("status", "=", w.GetToInt("status")),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *RulesWebTamperProtectionDSWrapper) listAntitamperRuleToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("rules", schemas.SliceToList(body.Get("items"),
			func(rule gjson.Result) any {
				return map[string]any{
					"id":          rule.Get("id").Value(),
					"policy_id":   rule.Get("policyid").Value(),
					"status":      rule.Get("status").Value(),
					"description": rule.Get("description").Value(),
					"path":        rule.Get("url").Value(),
					"domain":      rule.Get("hostname").Value(),
					"created_at":  w.setItemsTimestamp(rule),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*RulesWebTamperProtectionDSWrapper) setItemsTimestamp(data gjson.Result) string {
	rawDate := data.Get("timestamp").Int()
	return utils.FormatTimeStampRFC3339(rawDate/1000, false)
}
