// Generated by PMS #112
package waf

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafRulesPreciseProtection() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafRulesPreciseProtectionRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the policy to which the precise protection rules belong.`,
			},
			"rule_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the precise protection rule.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the precise protection rule.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID to which the protection policies belong.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the precise protection rule.`,
			},
			"rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the precise protection rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the precise protection rule.`,
						},
						"policy_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the policy to which the precise protection rule belongs.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the precise protection rule.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the precise protection rule.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The status of the precise protection rule.`,
						},
						"priority": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The priority of the precise protection rule.`,
						},
						"time": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `The effective time of the precision protection rule.`,
						},
						"start_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The start time for the implementation of precision protection rule.`,
						},
						"end_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The end time for the implementation of precision protection rule.`,
						},
						"conditions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The matching condition list of the precision protection rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"field": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The field of the condition.`,
									},
									"subfield": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The subfield of the condition.`,
									},
									"logic": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The condition matching logic.`,
									},
									"content": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The content of the match condition.`,
									},
									"reference_table_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The reference table id.`,
									},
								},
							},
						},
						"action": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The protective action of the precise protection rule.`,
						},
						"known_attack_source_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The known attack source ID.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the precise protection rule.`,
						},
					},
				},
			},
		},
	}
}

type RulesPreciseProtectionDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRulesPreciseProtectionDSWrapper(d *schema.ResourceData, meta interface{}) *RulesPreciseProtectionDSWrapper {
	return &RulesPreciseProtectionDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafRulesPreciseProtectionRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRulesPreciseProtectionDSWrapper(d, meta)
	lisCusRulRst, err := wrapper.ListCustomRules()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCustomRulesToSchema(lisCusRulRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/waf/policy/{policy_id}/custom
func (w *RulesPreciseProtectionDSWrapper) ListCustomRules() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v1/{project_id}/waf/policy/{policy_id}/custom"
	uri = strings.ReplaceAll(uri, "{policy_id}", d.Get("policy_id").(string))
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("items", "offset", "limit", 100).
		Filter(
			filters.New().From("items").
				Where("id", "=", w.Get("rule_id")).
				Where("name", "=", w.Get("name")).
				Where("status", "=", w.GetToInt("status")),
		).
		Request().
		Result()
}

func (w *RulesPreciseProtectionDSWrapper) listCustomRulesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("rules", schemas.SliceToList(body.Get("items"),
			func(rule gjson.Result) any {
				return map[string]any{
					"id":          rule.Get("id").Value(),
					"policy_id":   rule.Get("policyid").Value(),
					"name":        rule.Get("name").Value(),
					"description": rule.Get("description").Value(),
					"status":      rule.Get("status").Value(),
					"priority":    rule.Get("priority").Value(),
					"time":        rule.Get("time").Value(),
					"start_time":  w.setItemsStart(rule),
					"end_time":    w.setItemsTerminal(rule),
					"conditions": schemas.SliceToList(rule.Get("conditions"),
						func(condition gjson.Result) any {
							return map[string]any{
								"field":              condition.Get("category").Value(),
								"subfield":           condition.Get("index").Value(),
								"logic":              condition.Get("logic_operation").Value(),
								"content":            schemas.SliceToStrList(condition.Get("contents")),
								"reference_table_id": condition.Get("value_list_id").Value(),
							}
						},
					),
					"action":                 rule.Get("action.category").Value(),
					"known_attack_source_id": rule.Get("action.followed_action_id").Value(),
					"created_at":             w.setItemsTimestamp(rule),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*RulesPreciseProtectionDSWrapper) setItemsStart(data gjson.Result) string {
	rawDate := data.Get("start").Int()
	return utils.FormatTimeStampRFC3339(rawDate, false)
}

func (*RulesPreciseProtectionDSWrapper) setItemsTerminal(data gjson.Result) string {
	rawDate := data.Get("terminal").Int()
	return utils.FormatTimeStampRFC3339(rawDate, false)
}

func (*RulesPreciseProtectionDSWrapper) setItemsTimestamp(data gjson.Result) string {
	rawDate := data.Get("timestamp").Int()
	return utils.FormatTimeStampRFC3339(rawDate/1000, false)
}
