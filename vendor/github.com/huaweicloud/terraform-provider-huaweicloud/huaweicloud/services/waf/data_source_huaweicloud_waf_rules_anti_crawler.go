// Generated by PMS #143
package waf

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafRulesAntiCrawler() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafRulesAntiCrawlerRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the policy to which the anti crawler rules belong.`,
			},
			"rule_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the anti crawler rule.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the anti crawler rule.`,
			},
			"protection_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the protection mode of the anti crawler rule.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the anti crawler rule.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID to which the protection policies belong.`,
			},
			"rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of anti crawler rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the anti crawler rule.`,
						},
						"policy_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the policy to which the anti crawler rule belongs.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the anti crawler rule.`,
						},
						"protection_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The protection mode of the anti crawler rule.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The status of the anti crawler rule.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the anti crawler rule.`,
						},
						"priority": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The priority of the anti crawler rule.`,
						},
						"conditions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The matching condition list of the anti crawler rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"field": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The field type of the condition.`,
									},
									"logic": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The condition matching logic.`,
									},
									"content": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The content of the match condition.`,
									},
									"reference_table_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The reference table ID.`,
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the anti crawler rule.`,
						},
					},
				},
			},
		},
	}
}

type RulesAntiCrawlerDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRulesAntiCrawlerDSWrapper(d *schema.ResourceData, meta interface{}) *RulesAntiCrawlerDSWrapper {
	return &RulesAntiCrawlerDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafRulesAntiCrawlerRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRulesAntiCrawlerDSWrapper(d, meta)
	lisAntRulRst, err := wrapper.ListAnticrawlerRules()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAnticrawlerRulesToSchema(lisAntRulRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/waf/policy/{policy_id}/anticrawler
func (w *RulesAntiCrawlerDSWrapper) ListAnticrawlerRules() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v1/{project_id}/waf/policy/{policy_id}/anticrawler"
	uri = strings.ReplaceAll(uri, "{policy_id}", d.Get("policy_id").(string))
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"type":                  w.Get("protection_mode"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("items", "offset", "limit", 100).
		Filter(
			filters.New().From("items").
				Where("id", "=", w.Get("rule_id")).
				Where("status", "=", w.GetToInt("status")).
				Where("name", "=", w.Get("name")),
		).
		Request().
		Result()
}

func (w *RulesAntiCrawlerDSWrapper) listAnticrawlerRulesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("rules", schemas.SliceToList(body.Get("items"),
			func(rule gjson.Result) any {
				return map[string]any{
					"id":              rule.Get("id").Value(),
					"policy_id":       rule.Get("policyid").Value(),
					"name":            rule.Get("name").Value(),
					"protection_mode": rule.Get("type").Value(),
					"status":          rule.Get("status").Value(),
					"description":     rule.Get("description").Value(),
					"priority":        rule.Get("priority").Value(),
					"conditions": schemas.SliceToList(rule.Get("conditions"),
						func(condition gjson.Result) any {
							return map[string]any{
								"field":              condition.Get("category").Value(),
								"logic":              condition.Get("logic_operation").Value(),
								"content":            schemas.SliceToStrList(condition.Get("contents")),
								"reference_table_id": condition.Get("value_list_id").Value(),
							}
						},
					),
					"created_at": w.setItemsTimestamp(rule),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*RulesAntiCrawlerDSWrapper) setItemsTimestamp(data gjson.Result) string {
	rawDate := data.Get("timestamp").Int()
	return utils.FormatTimeStampRFC3339(rawDate/1000, false)
}
