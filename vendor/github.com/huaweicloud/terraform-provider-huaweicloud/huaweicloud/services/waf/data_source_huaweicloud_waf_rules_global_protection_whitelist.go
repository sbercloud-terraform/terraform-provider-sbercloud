// Generated by PMS #139
package waf

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceWafRulesGlobalProtectionWhitelist() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceWafRulesGlobalProtectionWhitelistRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the policy to which the global protection whitelist rules belong.`,
			},
			"rule_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the global protection whitelist rule.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the global protection whitelist rule.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID to which the protection policy belongs.`,
			},
			"rules": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the global protection whitelist rules.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the global protection whitelist rule.`,
						},
						"policy_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the policy to which the global protection whitelist rule belongs.`,
						},
						"status": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The status of the global protection whitelist rule.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the global protection whitelist rule.`,
						},
						"ignore_waf_protection": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The rules that need to be ignored.`,
						},
						"conditions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The matching condition list of the global protection whitelist rule.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"field": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The field type of the condition.`,
									},
									"subfield": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The subfield of the condition.`,
									},
									"logic": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The condition matching logic.`,
									},
									"content": {
										Type:        schema.TypeList,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The content of the match condition.`,
									},
								},
							},
						},
						"domains": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The protected domain name or website bound with the policy.`,
						},
						"advanced_field": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The filed type of the advanced configuration.`,
						},
						"advanced_content": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The subfiled of the advanced configuration.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the global protection whitelist rule.`,
						},
					},
				},
			},
		},
	}
}

type RulesGlobalProtectionWhitelistDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRulesGlobalProtectionWhitelistDSWrapper(d *schema.ResourceData, meta interface{}) *RulesGlobalProtectionWhitelistDSWrapper {
	return &RulesGlobalProtectionWhitelistDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceWafRulesGlobalProtectionWhitelistRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRulesGlobalProtectionWhitelistDSWrapper(d, meta)
	lisIgnRulRst, err := wrapper.ListIgnoreRule()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listIgnoreRuleToSchema(lisIgnRulRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API WAF GET /v1/{project_id}/waf/policy/{policy_id}/ignore
func (w *RulesGlobalProtectionWhitelistDSWrapper) ListIgnoreRule() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "waf")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v1/{project_id}/waf/policy/{policy_id}/ignore"
	uri = strings.ReplaceAll(uri, "{policy_id}", d.Get("policy_id").(string))
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		PageSizePager("items", "page", "pagesize", 100).
		Filter(
			filters.New().From("items").
				Where("id", "=", w.Get("rule_id")).
				Where("status", "=", w.GetToInt("status")),
		).
		Request().
		Result()
}

func (w *RulesGlobalProtectionWhitelistDSWrapper) listIgnoreRuleToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("rules", schemas.SliceToList(body.Get("items"),
			func(rule gjson.Result) any {
				return map[string]any{
					"id":                    rule.Get("id").Value(),
					"policy_id":             rule.Get("policyid").Value(),
					"status":                rule.Get("status").Value(),
					"description":           rule.Get("description").Value(),
					"ignore_waf_protection": rule.Get("rule").Value(),
					"conditions": schemas.SliceToList(rule.Get("conditions"),
						func(condition gjson.Result) any {
							return map[string]any{
								"field":    condition.Get("category").Value(),
								"subfield": condition.Get("index").Value(),
								"logic":    condition.Get("logic_operation").Value(),
								"content":  schemas.SliceToStrList(condition.Get("contents")),
							}
						},
					),
					"domains":          schemas.SliceToStrList(rule.Get("domain")),
					"advanced_field":   rule.Get("advanced.index").Value(),
					"advanced_content": schemas.SliceToStrList(rule.Get("advanced.contensts")),
					"created_at":       rule.Get("timestamp").String(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
