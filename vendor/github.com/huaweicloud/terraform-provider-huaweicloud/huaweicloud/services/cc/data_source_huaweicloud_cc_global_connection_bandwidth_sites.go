// Generated by PMS #109
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcGlobalConnectionBandwidthSites() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcGlobalConnectionBandwidthSitesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"site_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies site ID.`,
			},
			"site_code": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies site code.`,
			},
			"site_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies site type.`,
			},
			"name_en": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the site name in English.`,
			},
			"name_cn": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the site name in Chinese.`,
			},
			"site_infos": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The site list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The site ID.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The site description.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"name_en": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `User-defined site name in English.`,
						},
						"name_cn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `User-defined site name in Chinese.`,
						},
						"site_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The site code.`,
						},
						"site_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The site type.`,
						},
						"service_list": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The list of services supported at the site. Multiple services are separated by commas (,).`,
						},
						"group_list": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The site group list.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The site group list ID.`,
									},
									"description": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The site group list description.`,
									},
									"name_en": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `User-defined site group name in English.`,
									},
									"name_cn": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `User-defined site group name in Chinese.`,
									},
								},
							},
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The site region ID.`,
						},
						"public_border_group": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Whether the site is a central site or an edge site.`,
						},
					},
				},
			},
		},
	}
}

type GlobalConnectionBandwidthSitesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGlobalConnectionBandwidthSitesDSWrapper(d *schema.ResourceData, meta interface{}) *GlobalConnectionBandwidthSitesDSWrapper {
	return &GlobalConnectionBandwidthSitesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcGlobalConnectionBandwidthSitesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGlobalConnectionBandwidthSitesDSWrapper(d, meta)
	lisGloConBanSitRst, err := wrapper.ListGlobalConnectionBandwidthSites()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listGlobalConnectionBandwidthSitesToSchema(lisGloConBanSitRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcb/sites
func (w *GlobalConnectionBandwidthSitesDSWrapper) ListGlobalConnectionBandwidthSites() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/gcb/sites"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"id":        w.Get("site_id"),
		"site_code": w.Get("site_code"),
		"site_type": w.Get("site_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("site_infos", "page_info.next_marker", "marker").
		Filter(
			filters.New().From("site_infos").
				Where("name_en", "=", w.Get("name_en")).
				Where("name_cn", "=", w.Get("name_cn")),
		).
		Request().
		Result()
}

func (w *GlobalConnectionBandwidthSitesDSWrapper) listGlobalConnectionBandwidthSitesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("site_infos", schemas.SliceToList(body.Get("site_infos"),
			func(siteInfo gjson.Result) any {
				return map[string]any{
					"id":           siteInfo.Get("id").Value(),
					"description":  siteInfo.Get("description").Value(),
					"created_at":   siteInfo.Get("created_at").Value(),
					"updated_at":   siteInfo.Get("updated_at").Value(),
					"name_en":      siteInfo.Get("name_en").Value(),
					"name_cn":      siteInfo.Get("name_cn").Value(),
					"site_code":    siteInfo.Get("site_code").Value(),
					"site_type":    siteInfo.Get("site_type").Value(),
					"service_list": siteInfo.Get("service_list").Value(),
					"group_list": schemas.SliceToList(siteInfo.Get("group_list"),
						func(groupList gjson.Result) any {
							return map[string]any{
								"id":          groupList.Get("id").Value(),
								"description": groupList.Get("description").Value(),
								"name_en":     groupList.Get("name_en").Value(),
								"name_cn":     groupList.Get("name_cn").Value(),
							}
						},
					),
					"region_id":           siteInfo.Get("region_id").Value(),
					"public_border_group": siteInfo.Get("public_border_group").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
