// Generated by PMS #107
package cc

import (
	"context"
	"log"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcCentralNetworkPoliciesChangeSet() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcCentralNetworkPoliciesChangeSetRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies central network policy ID.`,
			},
			"central_network_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies central network ID.`,
			},
			"central_network_policy_change_set": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The central network policy change set.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"change_content": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The central network policy change set content.`,
						},
					},
				},
			},
		},
	}
}

type CentralNetworkPoliciesChangeSetDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCentralNetworkPoliciesChangeSetDSWrapper(d *schema.ResourceData, meta interface{}) *CentralNetworkPoliciesChangeSetDSWrapper {
	return &CentralNetworkPoliciesChangeSetDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcCentralNetworkPoliciesChangeSetRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCentralNetworkPoliciesChangeSetDSWrapper(d, meta)
	lcnpcsr, err := wrapper.ListCentralNetworkPolicyChangeSet()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCentralNetworkPolicyChangeSetToSchema(lcnpcsr)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcn/central-network/{central_network_id}/policies/{policy_id}/change-set
func (w *CentralNetworkPoliciesChangeSetDSWrapper) ListCentralNetworkPolicyChangeSet() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v3/{domain_id}/gcn/central-network/{central_network_id}/policies/{policy_id}/change-set"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	uri = strings.ReplaceAll(uri, "{policy_id}", d.Get("policy_id").(string))
	uri = strings.ReplaceAll(uri, "{central_network_id}", d.Get("central_network_id").(string))
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *CentralNetworkPoliciesChangeSetDSWrapper) listCentralNetworkPolicyChangeSetToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("central_network_policy_change_set", schemas.SliceToList(body.Get("central_network_policy_change_set"),
			func(cenNetPolChange gjson.Result) any {
				return map[string]any{
					"change_content": w.setCenNetChaCon(body, &cenNetPolChange),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*CentralNetworkPoliciesChangeSetDSWrapper) setCenNetChaCon(_, data *gjson.Result) map[string]string {
	changeContent, err := utils.ConvertStructToMap(data, map[string]string{})
	if err != nil {
		log.Printf("[ERROR] error converting CC central network policy change set: %s", err)
	}
	return utils.ExpandToStringMap(changeContent)
}
