// Generated by PMS #86
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcInterRegionBandwidths() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcInterRegionBandwidthsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"inter_region_bandwidth_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the inter-region bandwidth ID.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies enterprise project ID.`,
			},
			"cloud_connection_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud connection ID.`,
			},
			"bandwidth_package_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the bandwidth package ID.`,
			},
			"inter_region_bandwidths": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The inter-region bandwidth list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The inter-region bandwidth ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The inter-region bandwidth name.`,
						},
						"bandwidth": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The range of an inter-region bandwidth.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The inter-region bandwidth description.`,
						},
						"cloud_connection_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud connection ID.`,
						},
						"bandwidth_package_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The bandwidth package ID.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time.`,
						},
						"inter_regions": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The inter-region bandwidth details.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The inter-region ID.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The project ID of a region where the inter-region bandwidth is used.`,
									},
									"remote_region_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of another region where an inter-region bandwidth is used.`,
									},
									"local_region_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of one region where an inter-region bandwidth is used.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type InterRegionBandwidthsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newInterRegionBandwidthsDSWrapper(d *schema.ResourceData, meta interface{}) *InterRegionBandwidthsDSWrapper {
	return &InterRegionBandwidthsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcInterRegionBandwidthsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newInterRegionBandwidthsDSWrapper(d, meta)
	lisIntRegBanRst, err := wrapper.ListInterRegionBandwidths()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listInterRegionBandwidthsToSchema(lisIntRegBanRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/inter-region-bandwidths
func (w *InterRegionBandwidthsDSWrapper) ListInterRegionBandwidths() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/inter-region-bandwidths"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"id":                    w.Get("inter_region_bandwidth_id"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"cloud_connection_id":   w.Get("cloud_connection_id"),
		"bandwidth_package_id":  w.Get("bandwidth_package_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("inter_region_bandwidths", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *InterRegionBandwidthsDSWrapper) listInterRegionBandwidthsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("inter_region_bandwidths", schemas.SliceToList(body.Get("inter_region_bandwidths"),
			func(intRegBan gjson.Result) any {
				return map[string]any{
					"id":                   intRegBan.Get("id").Value(),
					"name":                 intRegBan.Get("name").Value(),
					"bandwidth":            intRegBan.Get("bandwidth").Value(),
					"description":          intRegBan.Get("description").Value(),
					"cloud_connection_id":  intRegBan.Get("cloud_connection_id").Value(),
					"bandwidth_package_id": intRegBan.Get("bandwidth_package_id").Value(),
					"created_at":           intRegBan.Get("created_at").Value(),
					"updated_at":           intRegBan.Get("updated_at").Value(),
					"inter_regions": schemas.SliceToList(intRegBan.Get("inter_regions"),
						func(intReg gjson.Result) any {
							return map[string]any{
								"id":               intReg.Get("id").Value(),
								"project_id":       intReg.Get("project_id").Value(),
								"remote_region_id": intReg.Get("remote_region_id").Value(),
								"local_region_id":  intReg.Get("local_region_id").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
