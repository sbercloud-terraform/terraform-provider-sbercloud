// Generated by PMS #56
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcCentralNetworkConnections() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcCentralNetworkConnectionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"central_network_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the central network ID.`,
			},
			"connection_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the central network connection ID.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the central network connection status.`,
			},
			"global_connection_bandwidth_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the bandwidth package ID of the central network connection.`,
			},
			"bandwidth_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the bandwidth type of the central network connection.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the central network connection type.`,
			},
			"is_cross_region": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether there are different regions.`,
			},
			"central_network_connections": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the central network connections.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network connection ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network connection name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network connection description.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the enterprise project that the virtual gateway belongs to.`,
						},
						"central_network_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The the central network ID.`,
						},
						"central_network_plane_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The plane ID of the enterprise router connection on the central network.`,
						},
						"global_connection_bandwidth_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The bandwidth ID of the enterprise router connection on the central network.`,
						},
						"bandwidth_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The bandwidth type of the enterprise router connection on the central network.`,
						},
						"bandwidth_size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The bandwidth size of the enterprise router connection on the central network.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network connection status.`,
						},
						"is_frozen": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the central network connection is frozen.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the enterprise router connection on the central network.`,
						},
						"connection_point_pair": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The both ends of a central network connection. The length is fixed to an array of 2.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The point ID of a central network connection.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The point project ID of a central network connection.`,
									},
									"region_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The point region ID of central network connection.`,
									},
									"site_code": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The site code of the point of central network connection.`,
									},
									"instance_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The point instance ID of central network connection.`,
									},
									"type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The point type of central network connection.`,
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time. The time is in the **yyyy-MM-ddTHH:mm:ss** format.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time. The time must be in the **yyyy-MM-ddTHH:mm:ss** format.`,
						},
					},
				},
			},
		},
	}
}

type CentralNetworkConnectionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCentralNetworkConnectionsDSWrapper(d *schema.ResourceData, meta interface{}) *CentralNetworkConnectionsDSWrapper {
	return &CentralNetworkConnectionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcCentralNetworkConnectionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCentralNetworkConnectionsDSWrapper(d, meta)
	lisCenNetConRst, err := wrapper.ListCentralNetworkConnections()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listCentralNetworkConnectionsToSchema(lisCenNetConRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcn/central-network/{central_network_id}/connections
func (w *CentralNetworkConnectionsDSWrapper) ListCentralNetworkConnections() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v3/{domain_id}/gcn/central-network/{central_network_id}/connections"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	uri = strings.ReplaceAll(uri, "{central_network_id}", d.Get("central_network_id").(string))
	params := map[string]any{
		"id":                             w.Get("connection_id"),
		"state":                          w.Get("status"),
		"global_connection_bandwidth_id": w.Get("global_connection_bandwidth_id"),
		"bandwidth_type":                 w.Get("bandwidth_type"),
		"connection_type":                w.Get("type"),
		"is_cross_region":                w.Get("is_cross_region"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("central_network_connections", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CentralNetworkConnectionsDSWrapper) listCentralNetworkConnectionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("central_network_connections", schemas.SliceToList(body.Get("central_network_connections"),
			func(cenNetCon gjson.Result) any {
				return map[string]any{
					"id":                             cenNetCon.Get("id").Value(),
					"name":                           cenNetCon.Get("name").Value(),
					"description":                    cenNetCon.Get("description").Value(),
					"enterprise_project_id":          cenNetCon.Get("enterprise_project_id").Value(),
					"central_network_id":             cenNetCon.Get("central_network_id").Value(),
					"central_network_plane_id":       cenNetCon.Get("central_network_plane_id").Value(),
					"global_connection_bandwidth_id": cenNetCon.Get("global_connection_bandwidth_id").Value(),
					"bandwidth_type":                 cenNetCon.Get("bandwidth_type").Value(),
					"bandwidth_size":                 cenNetCon.Get("bandwidth_size").Value(),
					"status":                         cenNetCon.Get("state").Value(),
					"is_frozen":                      cenNetCon.Get("is_frozen").Value(),
					"type":                           cenNetCon.Get("connection_type").Value(),
					"connection_point_pair": schemas.SliceToList(cenNetCon.Get("connection_point_pair"),
						func(conPoiPai gjson.Result) any {
							return map[string]any{
								"id":          conPoiPai.Get("id").Value(),
								"project_id":  conPoiPai.Get("project_id").Value(),
								"region_id":   conPoiPai.Get("region_id").Value(),
								"site_code":   conPoiPai.Get("site_code").Value(),
								"instance_id": conPoiPai.Get("instance_id").Value(),
								"type":        conPoiPai.Get("type").Value(),
							}
						},
					),
					"created_at": cenNetCon.Get("created_at").Value(),
					"updated_at": cenNetCon.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
