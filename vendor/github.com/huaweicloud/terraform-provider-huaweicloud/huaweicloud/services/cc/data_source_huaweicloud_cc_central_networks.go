// Generated by PMS #53
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcCentralNetworks() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcCentralNetworksRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"central_network_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of central network.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the central network. The name supports fuzzy query.`,
			},
			"state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the central network.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies enterprise project ID to which the central network belongs.`,
			},
			"central_networks": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The central network list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network description.`,
						},
						"state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network status.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of central network.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The update time of central network.`,
						},
						"default_plane_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The central network default plane ID.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the enterprise project that the central network belongs to.`,
						},
						"tags": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The central network tags.`,
						},
					},
				},
			},
		},
	}
}

type CentralNetworksDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCentralNetworksDSWrapper(d *schema.ResourceData, meta interface{}) *CentralNetworksDSWrapper {
	return &CentralNetworksDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcCentralNetworksRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCentralNetworksDSWrapper(d, meta)
	lisCenNetRst, err := wrapper.ListCentralNetworks()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listCentralNetworksToSchema(lisCenNetRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcn/central-networks
func (w *CentralNetworksDSWrapper) ListCentralNetworks() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/gcn/central-networks"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"id":                    w.Get("central_network_id"),
		"name":                  w.Get("name"),
		"state":                 w.Get("state"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("central_networks", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CentralNetworksDSWrapper) listCentralNetworksToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("central_networks", schemas.SliceToList(body.Get("central_networks"),
			func(cenNet gjson.Result) any {
				return map[string]any{
					"id":                    cenNet.Get("id").Value(),
					"name":                  cenNet.Get("name").Value(),
					"description":           cenNet.Get("description").Value(),
					"state":                 cenNet.Get("state").Value(),
					"created_at":            cenNet.Get("created_at").Value(),
					"updated_at":            cenNet.Get("updated_at").Value(),
					"default_plane_id":      cenNet.Get("default_plane_id").Value(),
					"enterprise_project_id": cenNet.Get("enterprise_project_id").Value(),
					"tags":                  w.setCenNetTag(body, &cenNet),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*CentralNetworksDSWrapper) setCenNetTag(_, data *gjson.Result) map[string]string {
	tags := make(map[string]string)

	tagArr := data.Get("tags").Array()
	for _, v := range tagArr {
		tags[v.Get("key").String()] = v.Get("value").String()
	}
	return tags
}
