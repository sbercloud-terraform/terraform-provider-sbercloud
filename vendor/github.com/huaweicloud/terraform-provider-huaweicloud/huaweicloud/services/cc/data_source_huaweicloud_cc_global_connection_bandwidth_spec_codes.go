// Generated by PMS #113
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcGlobalConnectionBandwidthSpecCodes() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcGlobalConnectionBandwidthSpecCodesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"spec_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Line specification ID.`,
			},
			"local_area": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Local access point included in the line specification.`,
			},
			"remote_area": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Remote access point included in the line specification.`,
			},
			"level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Line grade.`,
			},
			"spec_codes": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The line specification list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Line specification ID.`,
						},
						"local_area": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Local access point.`,
						},
						"remote_area": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Remote access point.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the resource was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the resource was updated.`,
						},
						"name_zh": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Line specification in Chinese.`,
						},
						"name_en": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Line specification in English.`,
						},
						"level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Line grade.`,
						},
						"sku": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Product code of specific global connection bandwidth line specifications.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Minimum bandwidth for sale, in Mbit/s.`,
						},
					},
				},
			},
		},
	}
}

type GlobalConnectionBandwidthSpecCodesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newGlobalConnectionBandwidthSpecCodesDSWrapper(d *schema.ResourceData, meta interface{}) *GlobalConnectionBandwidthSpecCodesDSWrapper {
	return &GlobalConnectionBandwidthSpecCodesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcGlobalConnectionBandwidthSpecCodesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newGlobalConnectionBandwidthSpecCodesDSWrapper(d, meta)
	lgcbscr, err := wrapper.ListGlobalConnectionBandwidthSpecCodes()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listGlobalConnectionBandwidthSpecCodesToSchema(lgcbscr)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcb/spec-codes
func (w *GlobalConnectionBandwidthSpecCodesDSWrapper) ListGlobalConnectionBandwidthSpecCodes() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/gcb/spec-codes"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"id":          w.Get("spec_id"),
		"local_area":  w.Get("local_area"),
		"remote_area": w.Get("remote_area"),
		"level":       w.Get("level"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("spec_codes", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *GlobalConnectionBandwidthSpecCodesDSWrapper) listGlobalConnectionBandwidthSpecCodesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("spec_codes", schemas.SliceToList(body.Get("spec_codes"),
			func(specCode gjson.Result) any {
				return map[string]any{
					"id":          specCode.Get("id").Value(),
					"local_area":  specCode.Get("local_area").Value(),
					"remote_area": specCode.Get("remote_area").Value(),
					"created_at":  specCode.Get("created_at").Value(),
					"updated_at":  specCode.Get("updated_at").Value(),
					"name_zh":     specCode.Get("name_zh").Value(),
					"name_en":     specCode.Get("name_en").Value(),
					"level":       specCode.Get("level").Value(),
					"sku":         specCode.Get("sku").Value(),
					"size":        specCode.Get("size").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
