// Generated by PMS #91
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcNetworkInstances() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcNetworkInstancesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"network_instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the network instance ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the network instance name.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the network instance description.`,
			},
			"cloud_connection_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud connection ID.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the network instance.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the network instance.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the VPC or virtual gateway to be loaded to the cloud connection.`,
			},
			"region_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID of the network instance.`,
			},
			"network_instances": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Network instance list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Network instance ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Network instance name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Network instance description.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `ID of the account that the network instance belongs to.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the network instance was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the network instance was updated.`,
						},
						"cloud_connection_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud connection ID.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the VPC or virtual gateway to be loaded to the cloud connection.`,
						},
						"instance_domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Account ID of the VPC or virtual gateway.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Region ID of the network instance.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Project ID of the network instance.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Status of the network instance.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Type of the network instance.`,
						},
						"cidrs": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The list of routes advertised by the network instance.`,
						},
					},
				},
			},
		},
	}
}

type NetworkInstancesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newNetworkInstancesDSWrapper(d *schema.ResourceData, meta interface{}) *NetworkInstancesDSWrapper {
	return &NetworkInstancesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcNetworkInstancesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newNetworkInstancesDSWrapper(d, meta)
	lisNetInsRst, err := wrapper.ListNetworkInstances()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listNetworkInstancesToSchema(lisNetInsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/network-instances
func (w *NetworkInstancesDSWrapper) ListNetworkInstances() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/network-instances"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"id":                  w.Get("network_instance_id"),
		"name":                w.Get("name"),
		"description":         w.Get("description"),
		"cloud_connection_id": w.Get("cloud_connection_id"),
		"status":              w.Get("status"),
		"type":                w.Get("type"),
		"instance_id":         w.Get("instance_id"),
		"region_id":           w.Get("region_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("network_instances", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *NetworkInstancesDSWrapper) listNetworkInstancesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("network_instances", schemas.SliceToList(body.Get("network_instances"),
			func(netIns gjson.Result) any {
				return map[string]any{
					"id":                  netIns.Get("id").Value(),
					"name":                netIns.Get("name").Value(),
					"description":         netIns.Get("description").Value(),
					"domain_id":           netIns.Get("domain_id").Value(),
					"created_at":          netIns.Get("created_at").Value(),
					"updated_at":          netIns.Get("updated_at").Value(),
					"cloud_connection_id": netIns.Get("cloud_connection_id").Value(),
					"instance_id":         netIns.Get("instance_id").Value(),
					"instance_domain_id":  netIns.Get("instance_domain_id").Value(),
					"region_id":           netIns.Get("region_id").Value(),
					"project_id":          netIns.Get("project_id").Value(),
					"status":              netIns.Get("status").Value(),
					"type":                netIns.Get("type").Value(),
					"cidrs":               schemas.SliceToStrList(netIns.Get("cidrs")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
