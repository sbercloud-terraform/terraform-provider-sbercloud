// Generated by PMS #115
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceCcConnectionTags() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcConnectionTagsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"tags": {
				Type:        schema.TypeMap,
				Computed:    true,
				Elem:        &schema.Schema{Type: schema.TypeString},
				Description: `All tags of the cloud connection.`,
			},
		},
	}
}

type ConnectionTagsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newConnectionTagsDSWrapper(d *schema.ResourceData, meta interface{}) *ConnectionTagsDSWrapper {
	return &ConnectionTagsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcConnectionTagsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newConnectionTagsDSWrapper(d, meta)
	lisCloConTagRst, err := wrapper.ListCloudConnectionTags()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listCloudConnectionTagsToSchema(lisCloConTagRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/cloud-connections/tags
func (w *ConnectionTagsDSWrapper) ListCloudConnectionTags() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/cloud-connections/tags"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Request().
		Result()
}

func (w *ConnectionTagsDSWrapper) listCloudConnectionTagsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("tags", w.setTag(*body)),
	)
	return mErr.ErrorOrNil()
}

func (*ConnectionTagsDSWrapper) setTag(body gjson.Result) map[string]string {
	tags := make(map[string]string)

	tagArr := body.Get("tags").Array()
	for _, v := range tagArr {
		tags[v.Get("key").String()] = v.Get("values").String()
	}
	return tags
}
