// Generated by PMS #134
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcSupportBindingGlobalConnectionBandwidths() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcSupportBindingGlobalConnectionBandwidthsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"binding_service": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the binding service.`,
			},
			"local_area": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the local access point.`,
			},
			"remote_area": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the remote access point.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"gcb_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the global connection bandwidth ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the global connection bandwidth name.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the global connection bandwidth type.`,
			},
			"charge_mode": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the billing option.`,
			},
			"size": {
				Type:        schema.TypeInt,
				Optional:    true,
				Description: `Specifies the global connection bandwidth size.`,
			},
			"sla_level": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the class of a global connection bandwidth.`,
			},
			"admin_state": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the global connection bandwidth status.`,
			},
			"globalconnection_bandwidths": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The global connection bandwidth list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The global connection bandwidth ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The global connection bandwidth name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The global connection bandwidth description.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the account that the global connection bandwidth belongs to.`,
						},
						"bordercross": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the global connection bandwidth is used for cross-border communications.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of a global connection bandwidth.`,
						},
						"binding_service": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the binding service.`,
						},
						"enterprise_project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the enterprise project that the global connection bandwidth belongs to.`,
						},
						"charge_mode": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The billing option. By default, billing by bandwidth is enabled.`,
						},
						"size": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The range of a global connection bandwidth, in Mbit/s.`,
						},
						"sla_level": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The class of a global connection bandwidth.`,
						},
						"local_site_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The code of the local access point.`,
						},
						"remote_site_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The code of the remote access point.`,
						},
						"frozen": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether a global connection bandwidth is frozen.`,
						},
						"spec_code_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The UUID of a line specification code.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the resource was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the resource was updated.`,
						},
						"enable_share": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether a global connection bandwidth can be used by multiple instances.`,
						},
						"local_area": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of a local access point.`,
						},
						"remote_area": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of a remote access point.`,
						},
						"admin_state": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The global connection bandwidth status.`,
						},
					},
				},
			},
		},
	}
}

type SupportBindingGlobalConnectionBandwidthsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newSupportBindingGlobalConnectionBandwidthsDSWrapper(
	d *schema.ResourceData,
	meta interface{},
) *SupportBindingGlobalConnectionBandwidthsDSWrapper {
	return &SupportBindingGlobalConnectionBandwidthsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcSupportBindingGlobalConnectionBandwidthsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newSupportBindingGlobalConnectionBandwidthsDSWrapper(d, meta)
	lisSupBinConBanRst, err := wrapper.ListSupportBindingConnectionBandwidths()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listSupportBindingConnectionBandwidthsToSchema(lisSupBinConBanRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/gcb/gcbandwidths/support-bindings
func (w *SupportBindingGlobalConnectionBandwidthsDSWrapper) ListSupportBindingConnectionBandwidths() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/gcb/gcbandwidths/support-bindings"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"local_area":            w.Get("local_area"),
		"remote_area":           w.Get("remote_area"),
		"binding_service":       w.Get("binding_service"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("globalconnection_bandwidths", "page_info.next_marker", "marker").
		Filter(
			filters.New().From("globalconnection_bandwidths").
				Where("id", "=", w.Get("gcb_id")).
				Where("name", "=", w.Get("name")).
				Where("size", "=", w.Get("size")).
				Where("sla_level", "=", w.Get("sla_level")).
				Where("type", "=", w.Get("type")).
				Where("charge_mode", "=", w.Get("charge_mode")).
				Where("admin_state", "=", w.Get("admin_state")),
		).
		Request().
		Result()
}

func (w *SupportBindingGlobalConnectionBandwidthsDSWrapper) listSupportBindingConnectionBandwidthsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("globalconnection_bandwidths", schemas.SliceToList(body.Get("globalconnection_bandwidths"),
			func(gloBan gjson.Result) any {
				return map[string]any{
					"id":                    gloBan.Get("id").Value(),
					"name":                  gloBan.Get("name").Value(),
					"description":           gloBan.Get("description").Value(),
					"domain_id":             gloBan.Get("domain_id").Value(),
					"bordercross":           gloBan.Get("bordercross").Value(),
					"type":                  gloBan.Get("type").Value(),
					"binding_service":       gloBan.Get("binding_service").Value(),
					"enterprise_project_id": gloBan.Get("enterprise_project_id").Value(),
					"charge_mode":           gloBan.Get("charge_mode").Value(),
					"size":                  gloBan.Get("size").Value(),
					"sla_level":             gloBan.Get("sla_level").Value(),
					"local_site_code":       gloBan.Get("local_site_code").Value(),
					"remote_site_code":      gloBan.Get("remote_site_code").Value(),
					"frozen":                gloBan.Get("frozen").Value(),
					"spec_code_id":          gloBan.Get("spec_code_id").Value(),
					"created_at":            gloBan.Get("created_at").Value(),
					"updated_at":            gloBan.Get("updated_at").Value(),
					"enable_share":          gloBan.Get("enable_share").Value(),
					"local_area":            gloBan.Get("local_area").Value(),
					"remote_area":           gloBan.Get("remote_area").Value(),
					"admin_state":           gloBan.Get("admin_state").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
