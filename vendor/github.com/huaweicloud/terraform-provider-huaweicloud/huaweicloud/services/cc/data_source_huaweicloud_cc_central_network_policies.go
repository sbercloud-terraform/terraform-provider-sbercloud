// Generated by PMS #57
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcCentralNetworkPolicies() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcCentralNetworkPoliciesRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"central_network_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of central network.`,
			},
			"policy_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of central network policy.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of central network policy.`,
			},
			"is_applied": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the central network policy is applied or not.`,
			},
			"central_network_policies": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the central network policies.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the central network policies.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The status of the central network policy.`,
						},
						"central_network_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the central network.`,
						},
						"is_applied": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether the policy is applied or not.`,
						},
						"version": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The version of the central network policy.`,
						},
						"document_template_version": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The document template version of the central network policy.`,
						},
						"document": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The document of the central network policy.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"default_plane": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the default central network plane.`,
									},
									"planes": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The list of the central network planes.`,
										Elem:        cenNetPolDocPlaElem(),
									},
									"er_instances": {
										Type:        schema.TypeList,
										Computed:    true,
										Description: `The list of the enterprise routers instances.`,
										Elem:        cenNetPolDocErInsElem(),
									},
								},
							},
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the central network policy.`,
						},
					},
				},
			},
		},
	}
}

// cenNetPolDocErInsElem
// The Elem of "central_network_policies.document.er_instances"
func cenNetPolDocErInsElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"project_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The project ID of the enterprise router on the central network.`,
			},
			"region_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The region ID of the enterprise router on the central network.`,
			},
			"enterprise_router_id": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The ID of the enterprise router on the central network.`,
			},
		},
	}
}

// cenNetPolDocPlaElem
// The Elem of "central_network_policies.document.planes"
func cenNetPolDocPlaElem() *schema.Resource {
	return &schema.Resource{
		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The name of the central network plane.`,
			},
			"associate_er_tables": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the enterprise router tables on the central network.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID of the enterprise router table on the central network.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region ID of the enterprise router table on the central network.`,
						},
						"enterprise_router_table_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the enterprise router table on the central network.`,
						},
						"enterprise_router_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the enterprise router table on the central network.`,
						},
					},
				},
			},
			"exclude_er_connections": {
				Type:     schema.TypeList,
				Computed: true,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"exclude_er_instances": {
							Type:     schema.TypeList,
							Computed: true,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The project ID of the exclude enterprise router instance.`,
									},
									"region_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The region ID of the exclude enterprise router instance`,
									},
									"enterprise_router_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The ID of the exclude enterprise router instance.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type CentralNetworkPoliciesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newCentralNetworkPoliciesDSWrapper(d *schema.ResourceData, meta interface{}) *CentralNetworkPoliciesDSWrapper {
	return &CentralNetworkPoliciesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcCentralNetworkPoliciesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newCentralNetworkPoliciesDSWrapper(d, meta)
	lisCenNetPolRst, err := wrapper.ListCentralNetworkPolicies()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listCentralNetworkPoliciesToSchema(lisCenNetPolRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)
	return nil
}

// @API CC GET /v3/{domain_id}/gcn/central-network/{central_network_id}/policies
func (w *CentralNetworkPoliciesDSWrapper) ListCentralNetworkPolicies() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v3/{domain_id}/gcn/central-network/{central_network_id}/policies"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	uri = strings.ReplaceAll(uri, "{central_network_id}", d.Get("central_network_id").(string))
	params := map[string]any{
		"id":         w.Get("policy_id"),
		"state":      w.Get("status"),
		"is_applied": w.Get("is_applied"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("central_network_policies", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *CentralNetworkPoliciesDSWrapper) listCentralNetworkPoliciesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("central_network_policies", schemas.SliceToList(body.Get("central_network_policies"),
			func(cenNetPol gjson.Result) any {
				return map[string]any{
					"id":                        cenNetPol.Get("id").Value(),
					"status":                    cenNetPol.Get("state").Value(),
					"central_network_id":        cenNetPol.Get("central_network_id").Value(),
					"is_applied":                cenNetPol.Get("is_applied").Value(),
					"version":                   cenNetPol.Get("version").Value(),
					"document_template_version": cenNetPol.Get("document_template_version").Value(),
					"document": schemas.SliceToList(cenNetPol.Get("document"),
						func(doc gjson.Result) any {
							return map[string]any{
								"default_plane": doc.Get("default_plane").Value(),
								"planes":        w.setCenNetPolDocPla(doc),
								"er_instances":  w.setCenNetPolDocErIns(doc),
							}
						},
					),
					"created_at": cenNetPol.Get("created_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*CentralNetworkPoliciesDSWrapper) setCenNetPolDocPla(doc gjson.Result) any {
	return schemas.SliceToList(doc.Get("planes"), func(planes gjson.Result) any {
		return map[string]any{
			"name": planes.Get("name").Value(),
			"associate_er_tables": schemas.SliceToList(planes.Get("associate_er_tables"),
				func(assErTab gjson.Result) any {
					return map[string]any{
						"project_id":                 assErTab.Get("project_id").Value(),
						"region_id":                  assErTab.Get("region_id").Value(),
						"enterprise_router_table_id": assErTab.Get("enterprise_router_table_id").Value(),
						"enterprise_router_id":       assErTab.Get("enterprise_router_id").Value(),
					}
				},
			),
			"exclude_er_connections": schemas.SliceToList(planes.Get("exclude_er_connections"),
				func(excErCon gjson.Result) any {
					return map[string]any{
						"exclude_er_instances": schemas.SliceToList(excErCon,
							func(er gjson.Result) any {
								return map[string]any{
									"project_id":           er.Get("project_id").Value(),
									"region_id":            er.Get("region_id").Value(),
									"enterprise_router_id": er.Get("enterprise_router_id").Value(),
								}
							},
						),
					}
				},
			),
		}
	})
}

func (*CentralNetworkPoliciesDSWrapper) setCenNetPolDocErIns(doc gjson.Result) any {
	return schemas.SliceToList(doc.Get("er_instances"), func(erIns gjson.Result) any {
		return map[string]any{
			"project_id":           erIns.Get("project_id").Value(),
			"region_id":            erIns.Get("region_id").Value(),
			"enterprise_router_id": erIns.Get("enterprise_router_id").Value(),
		}
	})
}
