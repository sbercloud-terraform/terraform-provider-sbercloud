// Generated by PMS #122
package cc

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCcPermissions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCcPermissionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"permission_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the permission ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the permission name.`,
			},
			"description": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the permission description.`,
			},
			"cloud_connection_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the cloud connection ID.`,
			},
			"instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the network instance ID.`,
			},
			"permissions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of the authorized instances.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The authorized instance ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The authorized instance name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The authorized instance description.`,
						},
						"domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The account ID to which the authorized instance belongs.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The project ID to which the authorized instance belongs.`,
						},
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region ID to which the authorized instance belongs.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The authorized instance status.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time.`,
						},
						"instance_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The network instance ID that another account allows you to use.`,
						},
						"instance_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The type of the network instance that another account allows you to use.`,
						},
						"instance_domain_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The account ID of the network instance that another account allows you to use.`,
						},
						"cloud_connection_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The cloud connection ID.`,
						},
					},
				},
			},
		},
	}
}

type PermissionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPermissionsDSWrapper(d *schema.ResourceData, meta interface{}) *PermissionsDSWrapper {
	return &PermissionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCcPermissionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPermissionsDSWrapper(d, meta)
	lisPerRst, err := wrapper.ListPermissions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listPermissionsToSchema(lisPerRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CC GET /v3/{domain_id}/ccaas/permissions
func (w *PermissionsDSWrapper) ListPermissions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{domain_id}/ccaas/permissions"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"id":                  w.Get("permission_id"),
		"name":                w.Get("name"),
		"description":         w.Get("description"),
		"cloud_connection_id": w.Get("cloud_connection_id"),
		"instance_id":         w.Get("instance_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("permissions", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *PermissionsDSWrapper) listPermissionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("permissions", schemas.SliceToList(body.Get("permissions"),
			func(permissions gjson.Result) any {
				return map[string]any{
					"id":                  permissions.Get("id").Value(),
					"name":                permissions.Get("name").Value(),
					"description":         permissions.Get("description").Value(),
					"domain_id":           permissions.Get("domain_id").Value(),
					"project_id":          permissions.Get("project_id").Value(),
					"region_id":           permissions.Get("region_id").Value(),
					"status":              permissions.Get("status").Value(),
					"created_at":          permissions.Get("created_at").Value(),
					"instance_id":         permissions.Get("instance_id").Value(),
					"instance_type":       permissions.Get("instance_type").Value(),
					"instance_domain_id":  permissions.Get("instance_domain_id").Value(),
					"cloud_connection_id": permissions.Get("cloud_connection_id").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
