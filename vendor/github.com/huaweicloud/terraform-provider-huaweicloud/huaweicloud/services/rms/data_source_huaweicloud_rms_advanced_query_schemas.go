// Generated by PMS #64
package rms

import (
	"context"
	"encoding/json"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceRmsAdvancedQuerySchemas() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsAdvancedQuerySchemasRead,

		Schema: map[string]*schema.Schema{
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the type of the schema.`,
			},
			"schemas": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of schema.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The schema type.`,
						},
						"schema": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The schema detail.`,
						},
					},
				},
			},
		},
	}
}

type AdvancedQuerySchemasDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAdvancedQuerySchemasDSWrapper(d *schema.ResourceData, meta interface{}) *AdvancedQuerySchemasDSWrapper {
	return &AdvancedQuerySchemasDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsAdvancedQuerySchemasRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAdvancedQuerySchemasDSWrapper(d, meta)
	listSchemasRst, err := wrapper.ListSchemas()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listSchemasToSchema(listSchemasRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)
	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/schemas
func (w *AdvancedQuerySchemasDSWrapper) ListSchemas() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/schemas"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		MarkerPager("value", "page_info.next_marker", "marker").
		Filter(
			filters.New().From("value").
				Where("type", "=", w.Get("type")),
		).
		Request().
		Result()
}

func (w *AdvancedQuerySchemasDSWrapper) listSchemasToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("schemas", schemas.SliceToList(body.Get("value"),
			func(schema gjson.Result) any {
				return map[string]any{
					"type":   schema.Get("type").Value(),
					"schema": w.setValueSchema(schema),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*AdvancedQuerySchemasDSWrapper) setValueSchema(data gjson.Result) map[string]interface{} {
	schemaToSet := data.Get("schema")
	result := make(map[string]interface{})
	for k, v := range schemaToSet.Map() {
		jsonBytes, _ := json.Marshal(v)
		result[k] = string(jsonBytes)
	}
	return result
}
