// Generated by PMS #93
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsAdvancedQueries() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsAdvancedQueriesRead,

		Schema: map[string]*schema.Schema{
			"query_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the advanced query ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the advanced query name.`,
			},
			"queries": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of advanced queries.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The advanced query name.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The advanced query ID.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The advanced query description.`,
						},
						"expression": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The advanced query expression.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the advanced query.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the advanced query.`,
						},
					},
				},
			},
		},
	}
}

type AdvancedQueriesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAdvancedQueriesDSWrapper(d *schema.ResourceData, meta interface{}) *AdvancedQueriesDSWrapper {
	return &AdvancedQueriesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsAdvancedQueriesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAdvancedQueriesDSWrapper(d, meta)
	lisStoQueRst, err := wrapper.ListStoredQueries()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listStoredQueriesToSchema(lisStoQueRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/stored-queries
func (w *AdvancedQueriesDSWrapper) ListStoredQueries() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/stored-queries"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("value", " page_info.next_marker", "marker").
		Filter(
			filters.New().From("value").
				Where("id", "=", w.Get("query_id")),
		).
		Request().
		Result()
}

func (w *AdvancedQueriesDSWrapper) listStoredQueriesToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("queries", schemas.SliceToList(body.Get("value"),
			func(queries gjson.Result) any {
				return map[string]any{
					"name":        queries.Get("name").Value(),
					"id":          queries.Get("id").Value(),
					"description": queries.Get("description").Value(),
					"expression":  queries.Get("expression").Value(),
					"created_at":  queries.Get("created").Value(),
					"updated_at":  queries.Get("updated").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
