// Generated by PMS #179
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsAggregatorSourceStatuses() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsAggregatorSourceStatusesRead,

		Schema: map[string]*schema.Schema{
			"aggregator_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the resource aggregator ID.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the aggregated source account.`,
			},
			"aggregated_source_statuses": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of source statuses`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"source_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source name.`,
						},
						"source_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source ID.`,
						},
						"source_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The source account type.`,
						},
						"last_error_code": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The error code returned when the last resource aggregation for the source fails.`,
						},
						"last_error_message": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The error message returned when the last resource aggregation for the source fails.`,
						},
						"last_update_status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest status of the source.`,
						},
						"last_update_time": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The last update time of the source.`,
						},
					},
				},
			},
		},
	}
}

type AggregatorSourceStatusesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAggregatorSourceStatusesDSWrapper(d *schema.ResourceData, meta interface{}) *AggregatorSourceStatusesDSWrapper {
	return &AggregatorSourceStatusesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsAggregatorSourceStatusesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAggregatorSourceStatusesDSWrapper(d, meta)
	shoConAggSouStaRst, err := wrapper.ShowConfigurationAggregatorSourcesStatus()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.showConfigurationAggregatorSourcesStatusToSchema(shoConAggSouStaRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/aggregators/{aggregator_id}/aggregator-sources-status
func (w *AggregatorSourceStatusesDSWrapper) ShowConfigurationAggregatorSourcesStatus() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/aggregators/{aggregator_id}/aggregator-sources-status"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	uri = strings.ReplaceAll(uri, "{aggregator_id}", w.Get("aggregator_id").(string))
	params := map[string]any{
		"update_status": w.Get("status"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("aggregated_source_statuses", "page_info.next_marker", "marker").
		OkCode(200).
		Request().
		Result()
}

func (w *AggregatorSourceStatusesDSWrapper) showConfigurationAggregatorSourcesStatusToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("aggregated_source_statuses", schemas.SliceToList(body.Get("aggregated_source_statuses"),
			func(aggSouSta gjson.Result) any {
				return map[string]any{
					"source_name":        aggSouSta.Get("source_name").Value(),
					"source_id":          aggSouSta.Get("source_id").Value(),
					"source_type":        aggSouSta.Get("source_type").Value(),
					"last_error_code":    aggSouSta.Get("last_error_code").Value(),
					"last_error_message": aggSouSta.Get("last_error_message").Value(),
					"last_update_status": aggSouSta.Get("last_update_status").Value(),
					"last_update_time":   aggSouSta.Get("last_update_time").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
