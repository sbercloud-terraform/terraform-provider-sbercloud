// Generated by PMS #80
package rms

import (
	"context"
	"encoding/json"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsOrganizationalPolicyAssignments() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsOrganizationalPolicyAssignmentsRead,

		Schema: map[string]*schema.Schema{
			"organization_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the ID of the organization.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the organizational policy assignment.`,
			},
			"assignment_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the organizational policy assignment.`,
			},
			"policy_definition_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the policy definition.`,
			},
			"assignments": {
				Type:        schema.TypeSet,
				Computed:    true,
				Description: `The organization assignments.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"organization_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the organization.`,
						},
						"owner_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creator of the organizational policy assignment.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the organizational policy assignment.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the organizational policy assignment.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the organizational policy assignment.`,
						},
						"policy_definition_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the built-in policy definition.`,
						},
						"period": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The trigger period of the organizational policy assignment.`,
						},
						"organization_policy_assignment_urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The unique identifier of the organizational policy assignment.`,
						},
						"policy_filter": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The configuration used to filter resources.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"region_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the region to which the filtered resources belong.`,
									},
									"resource_provider": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The service name to which the filtered resources belong.`,
									},
									"resource_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource type of the filtered resources.`,
									},
									"resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource ID used to filter a specified resource.`,
									},
									"tag_key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag name used to filter resources.`,
									},
									"tag_value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag value used to filter resources.`,
									},
								},
							},
						},
						"parameters": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The rule definition of the organizational policy assignment.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the organizational policy assignment.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the organizational policy assignment.`,
						},
					},
				},
			},
		},
	}
}

type OrganizationalPolicyAssignmentsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newOrganizationalPolicyAssignmentsDSWrapper(d *schema.ResourceData, meta interface{}) *OrganizationalPolicyAssignmentsDSWrapper {
	return &OrganizationalPolicyAssignmentsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsOrganizationalPolicyAssignmentsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newOrganizationalPolicyAssignmentsDSWrapper(d, meta)
	lisOrgPolAssRst, err := wrapper.ListOrganizationPolicyAssignments()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listOrganizationPolicyAssignmentsToSchema(lisOrgPolAssRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/organizations/{organization_id}/policy-assignments
func (w *OrganizationalPolicyAssignmentsDSWrapper) ListOrganizationPolicyAssignments() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	d := w.ResourceData
	uri := "/v1/resource-manager/organizations/{organization_id}/policy-assignments"
	uri = strings.ReplaceAll(uri, "{organization_id}", d.Get("organization_id").(string))
	params := map[string]any{
		"organization_policy_assignment_id":   w.Get("assignment_id"),
		"organization_policy_assignment_name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("organization_policy_assignments", "page_info.next_marker", "marker").
		Filter(
			filters.New().From("organization_policy_assignments").
				Where("policy_definition_id", "=", w.Get("policy_definition_id")),
		).
		Request().
		Result()
}

func (w *OrganizationalPolicyAssignmentsDSWrapper) listOrganizationPolicyAssignmentsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("assignments", schemas.SliceToList(body.Get("organization_policy_assignments"),
			func(ass gjson.Result) any {
				return map[string]any{
					"organization_id":                    ass.Get("organization_id").Value(),
					"owner_id":                           ass.Get("owner_id").Value(),
					"name":                               ass.Get("organization_policy_assignment_name").Value(),
					"id":                                 ass.Get("organization_policy_assignment_id").Value(),
					"description":                        ass.Get("description").Value(),
					"policy_definition_id":               ass.Get("policy_definition_id").Value(),
					"period":                             ass.Get("period").Value(),
					"organization_policy_assignment_urn": ass.Get("organization_policy_assignment_urn").Value(),
					"policy_filter": schemas.SliceToList(ass.Get("policy_filter"),
						func(polFil gjson.Result) any {
							return map[string]any{
								"region_id":         polFil.Get("region_id").Value(),
								"resource_provider": polFil.Get("resource_provider").Value(),
								"resource_type":     polFil.Get("resource_type").Value(),
								"resource_id":       polFil.Get("resource_id").Value(),
								"tag_key":           polFil.Get("tag_key").Value(),
								"tag_value":         polFil.Get("tag_value").Value(),
							}
						},
					),
					"parameters": w.setOrgPolAssPar(body, &ass),
					"created_at": ass.Get("created_at").Value(),
					"updated_at": ass.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*OrganizationalPolicyAssignmentsDSWrapper) setOrgPolAssPar(_, data *gjson.Result) map[string]interface{} {
	parameters := data.Get("parameters")
	result := make(map[string]interface{})
	for k, v := range parameters.Map() {
		val := v.Map()
		jsonBytes, _ := json.Marshal(val["value"])
		result[k] = string(jsonBytes)
	}
	return result
}
