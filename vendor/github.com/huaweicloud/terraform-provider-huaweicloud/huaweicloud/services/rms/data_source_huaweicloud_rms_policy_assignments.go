// Generated by PMS #35
package rms

import (
	"context"
	"encoding/json"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsPolicyAssignments() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsPolicyAssignmentsRead,

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the assignment name.`,
			},
			"assignment_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the policy assignment.`,
			},
			"policy_definition_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the policy definition.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the expect status of the policy.`,
			},
			"assignments": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The policy assignment list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The policy assignment ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The policy assignment name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The policy assignment description.`,
						},
						"policy_assignment_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Specifies the policy assignment type.`,
						},
						"policy_definition_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the policy used by the policy assignment.`,
						},
						"period": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The policy assignment period.`,
						},
						"policy_filter": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The configuration used to filter resources.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"region": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The name of the region to which the filtered resources belong.`,
									},
									"resource_provider": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The service name to which the filtered resources belong.`,
									},
									"resource_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource type of the filtered resources.`,
									},
									"resource_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The resource ID used to filter a specified resource.`,
									},
									"tag_key": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag name used to filter resources.`,
									},
									"tag_value": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The tag value used to filter resources.`,
									},
								},
							},
						},
						"custom_policy": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The configuration of the custom policy.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"function_urn": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The function URN used to create the custom policy.`,
									},
									"auth_type": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The authorization type of the custom policy.`,
									},
									"auth_value": {
										Type:        schema.TypeMap,
										Computed:    true,
										Elem:        &schema.Schema{Type: schema.TypeString},
										Description: `The authorization value of the custom policy.`,
									},
								},
							},
						},
						"parameters": {
							Type:        schema.TypeMap,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The policy assignment parameter.`,
						},
						"status": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The policy assignment status.`,
						},
						"created_by": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The policy assignment creator.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The creation time of the policy assignment.`,
						},
						"updated": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The latest update time of the policy assignment.`,
						},
					},
				},
			},
		},
	}
}

type PolicyAssignmentsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newPolicyAssignmentsDSWrapper(d *schema.ResourceData, meta interface{}) *PolicyAssignmentsDSWrapper {
	return &PolicyAssignmentsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsPolicyAssignmentsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newPolicyAssignmentsDSWrapper(d, meta)
	lisPolAssRst, err := wrapper.ListPolicyAssignments()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listPolicyAssignmentsToSchema(lisPolAssRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/policy-assignments
func (w *PolicyAssignmentsDSWrapper) ListPolicyAssignments() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/policy-assignments"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"policy_assignment_name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("value", "page_info.next_marker", "marker").
		Filter(
			filters.New().From("value").
				Where("policy_definition_id", "=", w.Get("policy_definition_id")).
				Where("state", "=", w.Get("status")).
				Where("id", "=", w.Get("assignment_id")),
		).
		Request().
		Result()
}

func (w *PolicyAssignmentsDSWrapper) listPolicyAssignmentsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("assignments", schemas.SliceToList(body.Get("value"),
			func(assignments gjson.Result) any {
				return map[string]any{
					"id":                     assignments.Get("id").Value(),
					"name":                   assignments.Get("name").Value(),
					"description":            assignments.Get("description").Value(),
					"policy_assignment_type": assignments.Get("policy_assignment_type").Value(),
					"policy_definition_id":   assignments.Get("policy_definition_id").Value(),
					"period":                 assignments.Get("period").Value(),
					"policy_filter": schemas.SliceToList(assignments.Get("policy_filter"),
						func(policyFilter gjson.Result) any {
							return map[string]any{
								"region":            policyFilter.Get("region_id").Value(),
								"resource_provider": policyFilter.Get("resource_provider").Value(),
								"resource_type":     policyFilter.Get("resource_type").Value(),
								"resource_id":       policyFilter.Get("resource_id").Value(),
								"tag_key":           policyFilter.Get("tag_key").Value(),
								"tag_value":         policyFilter.Get("tag_value").Value(),
							}
						},
					),
					"custom_policy": schemas.SliceToList(assignments.Get("custom_policy"),
						func(customPolicy gjson.Result) any {
							return map[string]any{
								"function_urn": customPolicy.Get("function_urn").Value(),
								"auth_type":    customPolicy.Get("auth_type").Value(),
								"auth_value":   w.setValCusPolAutVal(body, &customPolicy),
							}
						},
					),
					"parameters": w.setValueParameters(body, &assignments),
					"status":     assignments.Get("state").Value(),
					"created_by": assignments.Get("created_by").Value(),
					"created_at": assignments.Get("created").Value(),
					"updated":    assignments.Get("updated").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}

func (*PolicyAssignmentsDSWrapper) setValCusPolAutVal(_, data *gjson.Result) map[string]interface{} {
	authValues := data.Get("auth_value").Map()
	res := make(map[string]interface{})
	for k, v := range authValues {
		jsonBytes, _ := json.Marshal(v)
		res[k] = string(jsonBytes)
	}

	return res
}

func (*PolicyAssignmentsDSWrapper) setValueParameters(_, data *gjson.Result) map[string]interface{} {
	parameters := data.Get("parameters")
	result := make(map[string]interface{})
	for k, v := range parameters.Map() {
		val := v.Map()
		jsonBytes, _ := json.Marshal(val["value"])
		result[k] = string(jsonBytes)
	}
	return result
}
