// Generated by PMS #43
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceRmsRegions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsRegionsRead,

		Schema: map[string]*schema.Schema{
			"region_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region ID.`,
			},
			"display_name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the region dispaly name.`,
			},
			"regions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The region list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region ID.`,
						},
						"display_name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The display name of the region.`,
						},
					},
				},
			},
		},
	}
}

type RegionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newRegionsDSWrapper(d *schema.ResourceData, meta interface{}) *RegionsDSWrapper {
	return &RegionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsRegionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newRegionsDSWrapper(d, meta)
	listRegionsRst, err := wrapper.ListRegions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)

	err = wrapper.listRegionsToSchema(listRegionsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/regions
func (w *RegionsDSWrapper) ListRegions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/regions"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().
				From("value").
				Where("display_name", "=", w.Get("display_name")).
				Where("region_id", "=", w.Get("region_id")),
		).
		Request().
		Result()
}

func (w *RegionsDSWrapper) listRegionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("regions", schemas.SliceToList(body.Get("value"),
			func(regions gjson.Result) any {
				return map[string]any{
					"region_id":    regions.Get("region_id").Value(),
					"display_name": regions.Get("display_name").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
