// Generated by PMS #94
package rms

import (
	"context"
	"strings"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceRmsAggregators() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceRmsAggregatorsRead,

		Schema: map[string]*schema.Schema{
			"aggregator_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource aggregator ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource aggregator name.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the resource aggregator type, which can be ACCOUNT or ORGANIZATION.`,
			},
			"aggregators": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The resource aggregators.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"account_ids": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The source account list being aggregated.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource aggregator name.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource aggregator ID.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource aggregator type.`,
						},
						"urn": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The resource aggregator identifier.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the resource aggregator was created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The time when the resource aggregator was updated.`,
						},
					},
				},
			},
		},
	}
}

type AggregatorsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAggregatorsDSWrapper(d *schema.ResourceData, meta interface{}) *AggregatorsDSWrapper {
	return &AggregatorsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceRmsAggregatorsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAggregatorsDSWrapper(d, meta)
	lisConAggRst, err := wrapper.ListConfigurationAggregators()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listConfigurationAggregatorsToSchema(lisConAggRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CONFIG GET /v1/resource-manager/domains/{domain_id}/aggregators
func (w *AggregatorsDSWrapper) ListConfigurationAggregators() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "rms")
	if err != nil {
		return nil, err
	}

	uri := "/v1/resource-manager/domains/{domain_id}/aggregators"
	uri = strings.ReplaceAll(uri, "{domain_id}", w.Config.DomainID)
	params := map[string]any{
		"aggregator_name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("configuration_aggregators", " page_info.next_marker", "marker").
		Filter(
			filters.New().From("configuration_aggregators").
				Where("aggregator_id", "=", w.Get("aggregator_id")).
				Where("aggregator_type", "=", w.Get("type")),
		).
		Request().
		Result()
}

func (w *AggregatorsDSWrapper) listConfigurationAggregatorsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("aggregators", schemas.SliceToList(body.Get("configuration_aggregators"),
			func(aggregator gjson.Result) any {
				return map[string]any{
					"account_ids": schemas.SliceToStrList(aggregator.Get("account_aggregation_sources.domain_ids")),
					"name":        aggregator.Get("aggregator_name").Value(),
					"id":          aggregator.Get("aggregator_id").Value(),
					"type":        aggregator.Get("aggregator_type").Value(),
					"urn":         aggregator.Get("aggregator_urn").Value(),
					"created_at":  aggregator.Get("created_at").Value(),
					"updated_at":  aggregator.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
