// Generated by PMS #45
package vpc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceVpcTrafficMirrorFilters() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpcTrafficMirrorFiltersRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"traffic_mirror_filter_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the ID of the traffic mirror filter.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the traffic mirror filter.`,
			},
			"traffic_mirror_filters": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `List of traffic mirror filters.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Traffic mirror filter ID.`,
						},
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Project ID.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Description of a traffic mirror filter.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Traffic mirror filter name.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when a traffic mirror filter is updated.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when a traffic mirror filter is created.`,
						},
						"egress_rules": {
							Type:        schema.TypeSet,
							Computed:    true,
							Description: `Outbound mirror filter rules.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Traffic mirror filter rule ID.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Project ID.`,
									},
									"direction": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Traffic direction.`,
									},
									"description": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Description of a traffic mirror filter rule.`,
									},
									"action": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whether to accept or reject traffic.`,
									},
									"traffic_mirror_filter_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Traffic mirror filter ID.`,
									},
									"source_cidr_block": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Source CIDR block of the mirrored traffic.`,
									},
									"source_port_range": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Source port range.`,
									},
									"destination_cidr_block": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Destination CIDR block of the mirrored traffic.`,
									},
									"destination_port_range": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Source port range.`,
									},
									"ethertype": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `IP address version of the mirrored traffic.`,
									},
									"protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Protocol of the mirrored traffic.`,
									},
									"priority": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Mirror filter rule priority.`,
									},
									"created_at": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Time when a traffic mirror filter rule is created.`,
									},
									"updated_at": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Time when a traffic mirror filter rule is updated.`,
									},
								},
							},
						},
						"ingress_rules": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `Inbound mirror filter rules.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Traffic mirror filter rule ID.`,
									},
									"project_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Project ID.`,
									},
									"description": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Description of a traffic mirror filter rule.`,
									},
									"traffic_mirror_filter_id": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Traffic mirror filter ID.`,
									},
									"direction": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Traffic direction.`,
									},
									"source_cidr_block": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Source CIDR block of the mirrored traffic.`,
									},
									"source_port_range": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Source port range.`,
									},
									"destination_cidr_block": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Destination CIDR block of the mirrored traffic.`,
									},
									"destination_port_range": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Source port range.`,
									},
									"ethertype": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `IP address version of the mirrored traffic.`,
									},
									"protocol": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Protocol of the mirrored traffic.`,
									},
									"action": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Whether to accept or reject traffic.`,
									},
									"priority": {
										Type:        schema.TypeInt,
										Computed:    true,
										Description: `Mirror filter rule priority.`,
									},
									"created_at": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Time when a traffic mirror filter rule is created.`,
									},
									"updated_at": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `Time when a traffic mirror filter rule is updated.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type TrafficMirrorFiltersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTrafficMirrorFiltersDSWrapper(d *schema.ResourceData, meta interface{}) *TrafficMirrorFiltersDSWrapper {
	return &TrafficMirrorFiltersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpcTrafficMirrorFiltersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTrafficMirrorFiltersDSWrapper(d, meta)
	lisTraMirFilRst, err := wrapper.ListTrafficMirrorFilters()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listTrafficMirrorFiltersToSchema(lisTraMirFilRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API VPC GET /v3/{project_id}/vpc/traffic-mirror-filters
func (w *TrafficMirrorFiltersDSWrapper) ListTrafficMirrorFilters() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/vpc/traffic-mirror-filters"
	params := map[string]any{
		"id":   w.Get("traffic_mirror_filter_id"),
		"name": w.Get("name"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("traffic_mirror_filters", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *TrafficMirrorFiltersDSWrapper) listTrafficMirrorFiltersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("traffic_mirror_filters", schemas.SliceToList(body.Get("traffic_mirror_filters"),
			func(traMirFil gjson.Result) any {
				return map[string]any{
					"id":          traMirFil.Get("id").Value(),
					"project_id":  traMirFil.Get("project_id").Value(),
					"description": traMirFil.Get("description").Value(),
					"name":        traMirFil.Get("name").Value(),
					"updated_at":  traMirFil.Get("updated_at").Value(),
					"created_at":  traMirFil.Get("created_at").Value(),
					"egress_rules": schemas.SliceToList(traMirFil.Get("egress_rules"),
						func(egressRules gjson.Result) any {
							return map[string]any{
								"id":                       egressRules.Get("id").Value(),
								"project_id":               egressRules.Get("project_id").Value(),
								"direction":                egressRules.Get("direction").Value(),
								"description":              egressRules.Get("description").Value(),
								"action":                   egressRules.Get("action").Value(),
								"traffic_mirror_filter_id": egressRules.Get("traffic_mirror_filter_id").Value(),
								"source_cidr_block":        egressRules.Get("source_cidr_block").Value(),
								"source_port_range":        egressRules.Get("source_port_range").Value(),
								"destination_cidr_block":   egressRules.Get("destination_cidr_block").Value(),
								"destination_port_range":   egressRules.Get("destination_port_range").Value(),
								"ethertype":                egressRules.Get("ethertype").Value(),
								"protocol":                 egressRules.Get("protocol").Value(),
								"priority":                 egressRules.Get("priority").Value(),
								"created_at":               egressRules.Get("created_at").Value(),
								"updated_at":               egressRules.Get("updated_at").Value(),
							}
						},
					),
					"ingress_rules": schemas.SliceToList(traMirFil.Get("ingress_rules"),
						func(ingressRules gjson.Result) any {
							return map[string]any{
								"id":                       ingressRules.Get("id").Value(),
								"project_id":               ingressRules.Get("project_id").Value(),
								"description":              ingressRules.Get("description").Value(),
								"traffic_mirror_filter_id": ingressRules.Get("traffic_mirror_filter_id").Value(),
								"direction":                ingressRules.Get("direction").Value(),
								"source_cidr_block":        ingressRules.Get("source_cidr_block").Value(),
								"source_port_range":        ingressRules.Get("source_port_range").Value(),
								"destination_cidr_block":   ingressRules.Get("destination_cidr_block").Value(),
								"destination_port_range":   ingressRules.Get("destination_port_range").Value(),
								"ethertype":                ingressRules.Get("ethertype").Value(),
								"protocol":                 ingressRules.Get("protocol").Value(),
								"action":                   ingressRules.Get("action").Value(),
								"priority":                 ingressRules.Get("priority").Value(),
								"created_at":               ingressRules.Get("created_at").Value(),
								"updated_at":               ingressRules.Get("updated_at").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
