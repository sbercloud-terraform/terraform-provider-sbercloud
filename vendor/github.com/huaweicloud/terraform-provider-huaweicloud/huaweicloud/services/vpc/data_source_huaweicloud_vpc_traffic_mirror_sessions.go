// Generated by PMS #48
package vpc

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceVpcTrafficMirrorSessions() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceVpcTrafficMirrorSessionsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"traffic_mirror_session_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the traffic mirror session ID used to query.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the traffic mirror session name used to query.`,
			},
			"traffic_mirror_filter_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the traffic mirror filter ID used in the session.`,
			},
			"traffic_mirror_target_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the traffic mirror target ID.`,
			},
			"traffic_mirror_target_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the mirror target type. The value can be:`,
			},
			"priority": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the mirror session priority. The value range is **1-32766**.`,
			},
			"enabled": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies whether the mirror session is enabled. Defaults to **true**.`,
			},
			"type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the mirror source type. The value can be **eni**(elastic network interface).`,
			},
			"virtual_network_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the VNI, which is used to distinguish mirrored traffic of different`,
			},
			"packet_length": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the maximum transmission unit (MTU).`,
			},
			"traffic_mirror_sessions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `List of traffic mirror sessions.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"project_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Project ID.`,
						},
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Traffic mirror session ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Traffic mirror session name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Description of a traffic mirror session.`,
						},
						"type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Supported mirror source type.`,
						},
						"enabled": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `Whether to enable a mirror session.`,
						},
						"priority": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Mirror session priority.`,
						},
						"packet_length": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `Maximum transmission unit (MTU).`,
						},
						"virtual_network_id": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `VNI, which is used to distinguish mirrored traffic of different sessions.`,
						},
						"traffic_mirror_filter_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Traffic mirror filter ID.`,
						},
						"traffic_mirror_sources": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `Mirror source IDs. An elastic network interface can be used as a mirror source.`,
						},
						"traffic_mirror_target_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Mirror target ID.`,
						},
						"traffic_mirror_target_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Mirror target type.`,
						},
						"created_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when a traffic mirror session is created.`,
						},
						"updated_at": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `Time when the traffic mirror session is updated.`,
						},
					},
				},
			},
		},
	}
}

type TrafficMirrorSessionsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newTrafficMirrorSessionsDSWrapper(d *schema.ResourceData, meta interface{}) *TrafficMirrorSessionsDSWrapper {
	return &TrafficMirrorSessionsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceVpcTrafficMirrorSessionsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newTrafficMirrorSessionsDSWrapper(d, meta)
	lisTraMirSesRst, err := wrapper.ListTrafficMirrorSessions()
	if err != nil {
		return diag.FromErr(err)
	}

	err = wrapper.listTrafficMirrorSessionsToSchema(lisTraMirSesRst)
	if err != nil {
		return diag.FromErr(err)
	}

	id, _ := uuid.GenerateUUID()
	d.SetId(id)
	return nil
}

// @API VPC GET /v3/{project_id}/vpc/traffic-mirror-sessions
func (w *TrafficMirrorSessionsDSWrapper) ListTrafficMirrorSessions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "vpc")
	if err != nil {
		return nil, err
	}

	uri := "/v3/{project_id}/vpc/traffic-mirror-sessions"
	params := map[string]any{
		"id":                         w.Get("traffic_mirror_session_id"),
		"name":                       w.Get("name"),
		"traffic_mirror_filter_id":   w.Get("traffic_mirror_filter_id"),
		"traffic_mirror_target_id":   w.Get("traffic_mirror_target_id"),
		"traffic_mirror_target_type": w.Get("traffic_mirror_target_type"),
		"virtual_network_id":         w.Get("virtual_network_id"),
		"packet_length":              w.Get("packet_length"),
		"priority":                   w.Get("priority"),
		"enabled":                    w.Get("enabled"),
		"type":                       w.Get("type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		MarkerPager("traffic_mirror_sessions", "page_info.next_marker", "marker").
		Request().
		Result()
}

func (w *TrafficMirrorSessionsDSWrapper) listTrafficMirrorSessionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("traffic_mirror_sessions", schemas.SliceToList(body.Get("traffic_mirror_sessions"),
			func(traMirSes gjson.Result) any {
				return map[string]any{
					"project_id":                 traMirSes.Get("project_id").Value(),
					"id":                         traMirSes.Get("id").Value(),
					"name":                       traMirSes.Get("name").Value(),
					"description":                traMirSes.Get("description").Value(),
					"type":                       traMirSes.Get("type").Value(),
					"enabled":                    traMirSes.Get("enabled").Value(),
					"priority":                   traMirSes.Get("priority").Value(),
					"packet_length":              traMirSes.Get("packet_length").Value(),
					"virtual_network_id":         traMirSes.Get("virtual_network_id").Value(),
					"traffic_mirror_filter_id":   traMirSes.Get("traffic_mirror_filter_id").Value(),
					"traffic_mirror_sources":     schemas.SliceToStrList(traMirSes.Get("traffic_mirror_sources")),
					"traffic_mirror_target_id":   traMirSes.Get("traffic_mirror_target_id").Value(),
					"traffic_mirror_target_type": traMirSes.Get("traffic_mirror_target_type").Value(),
					"created_at":                 traMirSes.Get("created_at").Value(),
					"updated_at":                 traMirSes.Get("updated_at").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
