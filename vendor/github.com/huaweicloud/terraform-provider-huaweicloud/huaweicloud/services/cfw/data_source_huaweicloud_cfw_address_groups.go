// Generated by PMS #44
package cfw

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCfwAddressGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCfwAddressGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"object_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the protected object ID.`,
			},
			"fw_instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the firewall instance ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the address group.`,
			},
			"query_address_set_type": {
				Type:        schema.TypeInt,
				Optional:    true,
				Default:     0,
				Description: `Specifies the address group type of the query.`,
			},
			"address_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the IP address type.`,
			},
			"address": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies IP address of the IP address group.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project id to which the IP address group belongs.`,
			},
			"key_word": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the keyword of the address group description.`,
			},
			"address_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The IP address group list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The ID of the IP address group.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The IP address group name.`,
						},
						"ref_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of times this address group has been referenced.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The address groups description.`,
						},
						"object_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The protected object ID.`,
						},
						"type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The address group type.`,
						},
						"address_type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The address type.`,
						},
					},
				},
			},
		},
	}
}

type AddressGroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAddressGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *AddressGroupsDSWrapper {
	return &AddressGroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCfwAddressGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAddressGroupsDSWrapper(d, meta)
	lisAddSetRst, err := wrapper.ListAddressSets()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listAddressSetsToSchema(lisAddSetRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CFW GET /v1/{project_id}/address-sets
func (w *AddressGroupsDSWrapper) ListAddressSets() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/address-sets"
	params := map[string]any{
		"object_id":              w.Get("object_id"),
		"key_word":               w.Get("key_word"),
		"address":                w.Get("address"),
		"address_type":           w.Get("address_type"),
		"enterprise_project_id":  w.Get("enterprise_project_id"),
		"fw_instance_id":         w.Get("fw_instance_id"),
		"query_address_set_type": w.Get("query_address_set_type"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data.records", "offset", "limit", 1024).
		Filter(
			filters.New().From("data.records").
				Where("name", "=", w.Get("name")),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *AddressGroupsDSWrapper) listAddressSetsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("address_groups", schemas.SliceToList(body.Get("data.records"),
			func(addressGroup gjson.Result) any {
				return map[string]any{
					"id":           addressGroup.Get("set_id").Value(),
					"name":         addressGroup.Get("name").Value(),
					"ref_count":    addressGroup.Get("ref_count").Value(),
					"description":  addressGroup.Get("description").Value(),
					"object_id":    addressGroup.Get("object_id").Value(),
					"type":         addressGroup.Get("address_set_type").Value(),
					"address_type": addressGroup.Get("address_type").Value(),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
