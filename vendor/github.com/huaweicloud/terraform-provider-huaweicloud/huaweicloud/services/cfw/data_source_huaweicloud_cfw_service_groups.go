// Generated by PMS #31
package cfw

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/utils"
)

func DataSourceCfwServiceGroups() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceCfwServiceGroupsRead,

		Schema: map[string]*schema.Schema{
			"region": {
				Type:        schema.TypeString,
				Optional:    true,
				Computed:    true,
				Description: `Specifies the region in which to query the resource. If omitted, the provider-level region will be used.`,
			},
			"object_id": {
				Type:        schema.TypeString,
				Required:    true,
				Description: `Specifies the protected object ID.`,
			},
			"key_word": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the keyword of the service group description.`,
			},
			"fw_instance_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the firewall instance ID.`,
			},
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the service group.`,
			},
			"enterprise_project_id": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the enterprise project ID.`,
			},
			"service_groups": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `Service group list`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The service group ID.`,
						},
						"name": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The name of the service group.`,
						},
						"type": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The type of the Service group.`,
						},
						"ref_count": {
							Type:        schema.TypeInt,
							Computed:    true,
							Description: `The number of times this service group has been referenced.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the service group.`,
						},
						"protocols": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeInt},
							Description: `The protocols of the service group.`,
						},
					},
				},
			},
		},
	}
}

type ServiceGroupsDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newServiceGroupsDSWrapper(d *schema.ResourceData, meta interface{}) *ServiceGroupsDSWrapper {
	return &ServiceGroupsDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceCfwServiceGroupsRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newServiceGroupsDSWrapper(d, meta)
	lisSerSetRst, err := wrapper.ListServiceSets()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listServiceSetsToSchema(lisSerSetRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API CFW GET /v1/{project_id}/service-sets
func (w *ServiceGroupsDSWrapper) ListServiceSets() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "cfw")
	if err != nil {
		return nil, err
	}

	uri := "/v1/{project_id}/service-sets"
	params := map[string]any{
		"object_id":             w.Get("object_id"),
		"key_word":              w.Get("key_word"),
		"enterprise_project_id": w.Get("enterprise_project_id"),
		"fw_instance_id":        w.Get("fw_instance_id"),
	}
	params = utils.RemoveNil(params)
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Query(params).
		OffsetPager("data.records", "offset", "limit", 1024).
		Filter(
			filters.New().From("data.records").
				Where("name", "=", w.Get("name")),
		).
		OkCode(200).
		Request().
		Result()
}

func (w *ServiceGroupsDSWrapper) listServiceSetsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("region", w.Config.GetRegion(w.ResourceData)),
		d.Set("service_groups", schemas.SliceToList(body.Get("data.records"),
			func(serviceGroup gjson.Result) any {
				return map[string]any{
					"id":          serviceGroup.Get("set_id").Value(),
					"name":        serviceGroup.Get("name").Value(),
					"type":        serviceGroup.Get("service_set_type").Value(),
					"ref_count":   serviceGroup.Get("ref_count").Value(),
					"description": serviceGroup.Get("description").Value(),
					"protocols":   schemas.SliceToIntList(serviceGroup.Get("protocols")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
