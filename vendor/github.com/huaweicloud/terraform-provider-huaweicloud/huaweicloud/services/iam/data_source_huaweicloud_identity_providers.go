// Generated by PMS #114
package iam

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceIamIdentityProviders() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceIamIdentityProvidersRead,

		Schema: map[string]*schema.Schema{
			"name": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the name of the identity provider.`,
			},
			"sso_type": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the single sign-on type of the identity provider.`,
			},
			"status": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `Specifies the status of the identity provider. The value can be **true** or **false**`,
			},
			"identity_providers": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The list of identity providers.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The identity provider ID which equals the identity provider name.`,
						},
						"description": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The description of the identity provider.`,
						},
						"sso_type": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The single sign-on type of the identity provider.`,
						},
						"status": {
							Type:        schema.TypeBool,
							Computed:    true,
							Description: `The enabled status for the identity provider.`,
						},
						"remote_ids": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The list of federated user IDs configured for the identity provider.`,
						},
						"links": {
							Type:        schema.TypeList,
							Computed:    true,
							Description: `The links of identity provider.`,
							Elem: &schema.Resource{
								Schema: map[string]*schema.Schema{
									"self": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The identity provider resource link.`,
									},
									"protocols": {
										Type:        schema.TypeString,
										Computed:    true,
										Description: `The protocol resource link.`,
									},
								},
							},
						},
					},
				},
			},
		},
	}
}

type IdentityProvidersDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newIdentityProvidersDSWrapper(d *schema.ResourceData, meta interface{}) *IdentityProvidersDSWrapper {
	return &IdentityProvidersDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceIamIdentityProvidersRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newIdentityProvidersDSWrapper(d, meta)
	keyLisIdeProRst, err := wrapper.KeystoneListIdentityProviders()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.keystoneListIdentityProvidersToSchema(keyLisIdeProRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API IAM GET /v3/OS-FEDERATION/identity_providers
func (w *IdentityProvidersDSWrapper) KeystoneListIdentityProviders() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "iam")
	if err != nil {
		return nil, err
	}

	uri := "/v3/OS-FEDERATION/identity_providers"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		LinkPager("identity_providers", "links.next").
		Filter(
			filters.New().From("identity_providers").
				Where("id", "=", w.Get("name")).
				Where("sso_type", "=", w.Get("sso_type")).
				Where("enabled", "=", w.GetToBool("status")),
		).
		Request().
		Result()
}

func (w *IdentityProvidersDSWrapper) keystoneListIdentityProvidersToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("identity_providers", schemas.SliceToList(body.Get("identity_providers"),
			func(idePro gjson.Result) any {
				return map[string]any{
					"id":          idePro.Get("id").Value(),
					"description": idePro.Get("description").Value(),
					"sso_type":    idePro.Get("sso_type").Value(),
					"status":      idePro.Get("enabled").Value(),
					"remote_ids":  schemas.SliceToStrList(idePro.Get("remote_ids")),
					"links": schemas.SliceToList(idePro.Get("links"),
						func(link gjson.Result) any {
							return map[string]any{
								"self":      link.Get("self").Value(),
								"protocols": link.Get("protocols").Value(),
							}
						},
					),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
