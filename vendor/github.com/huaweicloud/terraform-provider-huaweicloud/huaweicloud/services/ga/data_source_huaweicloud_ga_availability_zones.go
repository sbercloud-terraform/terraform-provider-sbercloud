// Generated by PMS #133
package ga

import (
	"context"

	"github.com/hashicorp/go-multierror"
	"github.com/hashicorp/go-uuid"
	"github.com/hashicorp/terraform-plugin-sdk/v2/diag"
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	"github.com/tidwall/gjson"

	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/config"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/filters"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/httphelper"
	"github.com/huaweicloud/terraform-provider-huaweicloud/huaweicloud/helper/schemas"
)

func DataSourceAvailabilityZones() *schema.Resource {
	return &schema.Resource{
		ReadContext: dataSourceGaAvailabilityZonesRead,

		Schema: map[string]*schema.Schema{
			"area": {
				Type:        schema.TypeString,
				Optional:    true,
				Description: `The acceleration area to which the regions belong.`,
			},
			"regions": {
				Type:        schema.TypeList,
				Computed:    true,
				Description: `The region list.`,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"region_id": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The region ID.`,
						},
						"area": {
							Type:        schema.TypeString,
							Computed:    true,
							Description: `The acceleration area to which the region belongs.`,
						},
						"endpoint_types": {
							Type:        schema.TypeList,
							Computed:    true,
							Elem:        &schema.Schema{Type: schema.TypeString},
							Description: `The endpoint type supported by the region.`,
						},
					},
				},
			},
		},
	}
}

type AvailabilityZonesDSWrapper struct {
	*schemas.ResourceDataWrapper
	Config *config.Config
}

func newAvailabilityZonesDSWrapper(d *schema.ResourceData, meta interface{}) *AvailabilityZonesDSWrapper {
	return &AvailabilityZonesDSWrapper{
		ResourceDataWrapper: schemas.NewSchemaWrapper(d),
		Config:              meta.(*config.Config),
	}
}

func dataSourceGaAvailabilityZonesRead(_ context.Context, d *schema.ResourceData, meta interface{}) diag.Diagnostics {
	wrapper := newAvailabilityZonesDSWrapper(d, meta)
	listRegionsRst, err := wrapper.ListRegions()
	if err != nil {
		return diag.FromErr(err)
	}

	id, err := uuid.GenerateUUID()
	if err != nil {
		return diag.FromErr(err)
	}
	d.SetId(id)

	err = wrapper.listRegionsToSchema(listRegionsRst)
	if err != nil {
		return diag.FromErr(err)
	}

	return nil
}

// @API GA GET /v1/regions
func (w *AvailabilityZonesDSWrapper) ListRegions() (*gjson.Result, error) {
	client, err := w.NewClient(w.Config, "ga")
	if err != nil {
		return nil, err
	}

	uri := "/v1/regions"
	return httphelper.New(client).
		Method("GET").
		URI(uri).
		Filter(
			filters.New().From("regions").
				Where("area", "=", w.Get("area")),
		).
		Request().
		Result()
}

func (w *AvailabilityZonesDSWrapper) listRegionsToSchema(body *gjson.Result) error {
	d := w.ResourceData
	mErr := multierror.Append(nil,
		d.Set("regions", schemas.SliceToList(body.Get("regions"),
			func(region gjson.Result) any {
				return map[string]any{
					"region_id":      region.Get("region_id").Value(),
					"area":           region.Get("area").Value(),
					"endpoint_types": schemas.SliceToStrList(region.Get("supported_endpoint_types")),
				}
			},
		)),
	)
	return mErr.ErrorOrNil()
}
